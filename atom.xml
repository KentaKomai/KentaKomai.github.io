<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KentaKomai's BLOG]]></title>
  <link href="http://KentaKomai.github.io/atom.xml" rel="self"/>
  <link href="http://KentaKomai.github.io/"/>
  <updated>2013-12-08T19:42:44+09:00</updated>
  <id>http://KentaKomai.github.io/</id>
  <author>
    <name><![CDATA[Kenta Komai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[簡易プロセス死活監視プログラムをc#で]]></title>
    <link href="http://KentaKomai.github.io/blog/2013/11/28/wordpress77/"/>
    
    <updated>2013-11-28T00:00:00+09:00</updated>
    <id>http://KentaKomai.github.io/blog/2013/11/28/wordpress77</id>
    
    <content type="html"><![CDATA[<p>わざわざブログ記事にまとめるほど内容があるわけではないんですが、 調べてみたら、すんごく簡単にできて便利だったので書き残しておきます。</p>

<p>プロセス死活監視というのもおこがましいかもしれない（笑）</p>

<h3>やりたいこと</h3>

<ol>
<li>特定のプログラムが動作しているかをチェック</li>
<li>特定のプログラムが動作していて、尚且フリーズしていないか(反応があるか)</li>
<li>対象プログラムがフリーズしていれば再起動</li>
<li>対象プログラムが動作していなければ起動</li>
</ol>


<p>これが最低限。ログ取ったり、何かしらで遠隔にアラート出せたらもっと便利だと思います。</p>

<h3>きっかけ</h3>

<p>僕は詳しいこと知らないんですが、おそらくちゃんと監視したいなら、NagiosとかZabbix とか導入するべきなんでしょうけど、とにかく時間も知識もなく、本当に簡易的なもので も、どうにか用意する必要があったので調べてみたことがきっかけです。</p>

<p>結果的に、30分もしないで書けたのでよかった。 NagiosとかZabbixは本格的に導入する必要が出たときに、改めて検討します。</p>

<h3>ソースコード</h3>

<p>え、これだけ？って思う人ほとんどだけだと思うけど、これだけです。 5秒ごとに、指定プログラム（このサンプルではメモ帳）のプロセスの有無と反応をチェックして、条件を満たしていなければ 起動するだけ。</p>

<p>本来であれば、Thread.Sleep()ではなくTimerコントロールとか使うといいかもしれません</p>

<pre>using System.Diagnostics;
using System.Threading;

public void main(){
    while (true)
    {
        bool flg = false;
        Process[] processList = Process.GetProcesses();
        foreach (Process p in processList){
            if(p.ProcessName == "notepad"){
                flg = true;
                if (p.Responding){
                    Console.WriteLine("OK");
                    break;
                }else{
                    p.CloseMainWindow();
                    RunApp();
                }
            }
        }
        if (!flg){
            RunApp();
        }
        System.Threading.Thread.Sleep(5000);
    }
}

private void RunApp(){
    Process myProcess = new Process();
    myProcess.StartInfo.FileName = "Notepad";
    myProcess.StartInfo.WindowStyle = ProcessWindowStyle.Normal;
    myProcess.Start();
}
</pre>


<h3>最後に</h3>

<p>一番最初がーーーーーっと一気に書いて動かしてみたときに、条件分岐の判定を 間違えて、すごい勢いでメモ帳がいくつも起動して焦りました（笑）</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[xv6のソースコードとテキストを読んでみる1_chapter0_2]]></title>
    <link href="http://KentaKomai.github.io/blog/2013/11/25/wordpress76/"/>
    
    <updated>2013-11-25T00:00:00+09:00</updated>
    <id>http://KentaKomai.github.io/blog/2013/11/25/wordpress76</id>
    
    <content type="html"><![CDATA[<p><a href="http://komaken.me/blog/2013/11/10/xv6%E3%81%AE%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%81%A8%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%82%92%E8%AA%AD%E3%82%93%E3%81%A7%E3%81%BF%E3%82%8B1_chapter0_1-2/">前回</a>に書いたとおり、 Unix v6の移植版xv6のソースコードと、 テキストを読んでいこうと思います。</p>

<p>翻訳ははっきりいってかなりお粗末なもので、 僕が独自に解釈したものが多く含まれています。</p>

<p>あまりにも間違った内容が載っている可能性もあります。ご注意ください。 (※お気づきの方いらっしゃいましたら、教えてくれるととてもありがたいです。)</p>

<h2>Chapter0</h2>

<h3>プロセスとメモリ</h3>

<p>xv6ののメモリは、命令例、変数、スタックが入ったユーザ空間と プロセスごとにプライベートなカーネル空間で構成されています。 xv6はプロセスが実行待機しているプロセスの中からCPU資源を割り当てる タイムシェアリングという仕組みを提供しています。</p>

<p>プロセスが実行されていないとき、xv6はプロセスのCPUレジスタを保存し、次に そのプロセスが実行されるときにリストアします。カーネルはそれぞれのプロセスに プロセス識別子、またはpidを割り当てます。</p>

<p>プロセスが新しいプロセスを作成するときはforkシステムコールを呼び出します。 forkは呼び出しプロセス(親プロセス)と同じメモリ情報を持った新しいプロセス （子プロセスと呼ばれます）を作成します。</p>

<p>親プロセスで呼び出されたforkは子プロセスのpidを返し、子プロセス内のforkはゼロを 返します。下記にサンプルコードを示します。</p>

<pre>int pid;
pid = fork();
if(pid > 0){
    printf("parent: child=%d\n", pid);
    pid = wait();
    printf("child %d is done\n", pid);
} else if(pid == 0){
    printf("child: exiting\n");
    exit();
} else {
    printf("fork error\n");
}
</pre>


<p>exitシステムコールは、呼び出しプロセスの実行を止め、メモリやオープンしたファイルなどの リソースの解放を行います。</p>

<p>waitシステムコールは、現在実行しているプロセスの子プロセスが終了するまで待ち、 終了したときに子プロセスのpidを返します。例えば</p>

<pre>parent: child=1234
child: exiting
</pre>


<p>このような出力をしたプログラムがあるとして（&#8221;parent: child=1234&#8243;は親プロセスが &#8220;child: exiting&#8221;は子プロセスが出力したとします。親プロセスと子プロセス、どちらの printfが先に呼ばれたか、は上記の通り出ない場合もあります。）</p>

<p>この二つの出力の後、子プロセスは終了し、親プロセスはwaitシステムコールから 処理が帰ってくることになります。</p>

<p>そして、さらに以下を出力します。</p>

<pre>parent: child 1234 is done
</pre>


<p>親と子、それぞれのプロセスは、それぞれ別のメモリ空間とレジスタ上で 実行されていることに注意してください。一方で変数の中身を変えたとしても 他方に影響はありません。</p>

<p>execシステムコールは呼び出しプロセスのメモリを、ファイルから読み込んだ 新しいメモリイメージで置換えます。ファイルは、命令、データ、そしてどこから 処理を開始するか、などの情報を保持した特定のフォーマットに従ったもので なければなりません。xv6において、そのフォーマットはELFと呼ばれるものを使用します。 ELFに関する詳細はchpater2で説明していきます。</p>

<p>execが成功すると、呼び出しプログラムへ処理は戻らず、ロードしたファイル内のELFヘッダ に定義されているエントリーポイント(処理がスタートする箇所)から、読み込んだプログラムの 実行をスタートします。</p>

<p>execの実行には引数が２つ必要です。ひとつは実行可能ファイルの名前（パス）で、 もう一方は、読み込むファイル（プログラム）に対する引数群です。以下はサンプルコードです。</p>

<pre>char *argv[3];
argv[0] = "echo";
argv[1] = "hello";
argv[2] = 0;
exec("/bin/echo", argv);
printf("exec error\n");
</pre>


<p>上記の例では、execを呼び出したプログラムが &#8220;/bin/echo&#8221;と引数&#8221;echo&#8221;と&#8221;hello&#8221;に置換えられる例です。</p>

<p>ほとんどのプログラムで最初の引数は慣例的にプログラムの名前自身で、それを無視します。</p>

<p>xv6のシェルでは上記のようにして、ユーザの代わりにプログラムを実行します。 シェルの基本的な構造はとてもシンプルです。ソースコードテキストの8001行目で確認できます。</p>

<p>メインのループでは、getcmdを用いて、コマンドラインから入力を受け付けています。 forkが呼ばれるときに、シェルプロセスのコピーが作成されます。親プロセスのシェルは 子プロセスのコマンドが実行されている間、waitシステムコールを呼び出しています。</p>

<pre>int
main(void)
{
    static char buf[100];
    int fd;

    // Assumes three file descriptors open.
    while((fd = open("console", O_RDWR)) >= 0){
        if(fd >= 3){
            close(fd);
            break;
        }
    }

    // Read and run input commands.
    while(getcmd(buf, sizeof(buf)) >= 0){
        if(buf[0] == ’c’ &#038;&#038; buf[1] == ’d’ &#038;&#038; buf[2] == ’ ’){
            // Clumsy but will have to do for now.
            // Chdir has no effect on the parent if run in the child.
            buf[strlen(buf)−1] = 0; // chop \n
            if(chdir(buf+3) &lt; 0)
                printf(2, "cannot cd %s\n", buf+3);
            continue;
        }
        if(fork1() == 0)
            runcmd(parsecmd(buf));
        wait();
    }
    exit();
}
</pre>


<p>例えば、ユーザが&#8221;echo hello&#8221;とコマンドラインに入力すると、 &ldquo;echo hello&#8221;を引数として、runcmd()が呼び出されます。</p>

<p>runcmd(7906行目)は引数に渡されたコマンドを実行します。&#8221;echo hello&#8221;が入力された場合、 runcmdの内部ではexec(7926行目)が呼び出されす。execの実行が成功すると、runcmdから 読み込まれた命令を実行します。</p>

<p></pre></p>

<pre>void
runcmd(struct cmd *cmd)
{
  int p[2];
  struct backcmd *bcmd;
  struct execcmd *ecmd;
  struct listcmd *lcmd;
  struct pipecmd *pcmd;
  struct redircmd *rcmd;
 
  if(cmd == 0)
    exit();
   
  switch(cmd->type){
  default:
    panic("runcmd");
 
  case EXEC:
    ecmd = (struct execcmd*)cmd;
    if(ecmd->argv[0] == 0)
      exit();
    exec(ecmd->argv[0], ecmd->argv);
    printf(2, "exec %s failed\n", ecmd->argv[0]);
    break;
 
  case REDIR:
    rcmd = (struct redircmd*)cmd;
    close(rcmd->fd);
    if(open(rcmd->file, rcmd->mode) &lt; 0){
      printf(2, "open %s failed\n", rcmd->file);
      exit();
    }
    runcmd(rcmd->cmd);
    break;
 
  case LIST:
    lcmd = (struct listcmd*)cmd;
    if(fork1() == 0)
      runcmd(lcmd->left);
    wait();
    runcmd(lcmd->right);
    break;
 
  case PIPE:
    pcmd = (struct pipecmd*)cmd;
    if(pipe(p) &lt; 0)
      panic("pipe");
    if(fork1() == 0){
      close(1);
      dup(p[1]);
      close(p[0]);
      close(p[1]);
      runcmd(pcmd->left);
    }
    if(fork1() == 0){
      close(0);
      dup(p[0]);
      close(p[0]);
      close(p[1]);
      runcmd(pcmd->right);
    }
    close(p[0]);
    close(p[1]);
    wait();
    wait();
    break;
     
  case BACK:
    bcmd = (struct backcmd*)cmd;
    if(fork1() == 0)
      runcmd(bcmd->cmd);
    break;
  }
  exit();
}
</pre>


<p>いずれ、runcmdから読み込まれたファイルは処理を終え、exitを呼び出します。 そうると、親プロセスのwait呼び出し箇所に、処理が戻ります。</p>

<p>forkとexecがひとつの命令でなく、分かれていることを不思議に思うかもしれません。 なぜ、プロセスを生成するforkと、プログラムをロードするexecが別々に定義されているかは、 後ほど解説していきます。それがとても秀逸なデザインであることがわかると思います。</p>

<p>xv6は暗黙的にほとんどのユーザ空間メモリを割り当てます。forkは親プロセスのメモリをコピーし 子プロセスに割り当て、それからexecは実行ファイルを保持するのに十分なメモリを 割り当てます。プロセスが実行中に更にメモリを必要とした場合(mallocなど)には、 sbrk(n)をコールすることで、データ領域をnバイト拡張することができます。 sbrkは新しいメモリ領域のアドレスを返します。</p>

<p>xv6はユーザという概念を提供しておらず、他のユーザからあるユーザを守る、といった 機能はありません。Unixでいえば、xv6のプロセスは全てrootで動作する、と言えます。</p>

<h3>原文</h3>

<p>An xv6 process consists of user-space memory (instructions, data, and stack) and per-process state private to the kernel. Xv6 provides time-sharing: it transparently switches the available CPUs among the set of processes waiting to execute. When a process is not executing, xv6 saves its CPU registers, restoring them when it next runs the process. The kernel associates a process identifier, or pid, with each process.</p>

<p>A process may create a new process using the fork system call. Fork creates a new process, called the child process, with exactly the same memory contents as the calling process, called the parent process. Fork returns in both the parent and the child. In the parent, fork returns the child’s pid; in the child, it returns zero. For example, consider the following program fragment:</p>

<p>[::source code::]</p>

<p>The exit system call causes the calling process to stop executing and to release resources such as memory and open files. The wait system call returns the pid of an exited child of the current process; if none of the caller’s children has exited, wait waits for one to do so. In the example, the output lines</p>

<p>[::source code::]</p>

<p>might come out in either order, depending on whether the parent or child gets to its printf call first. After the child exits the parent’s wait returns, causing the parent to print</p>

<p>[::source code::]</p>

<p>Note that the parent and child were executing with different memory and different registers: changing a variable in one does not affect the other.</p>

<p>The exec system call replaces the calling process’s memory with a new memory image loaded from a file stored in the file system. The file must have a particular format, which specifies which part of the file holds instructions, which part is data, at which instruction to start, etc.</p>

<p>xv6 uses the ELF format, which Chapter 2 discusses in more detail. When exec succeeds, it does not return to the calling program; instead, the instructions loaded from the file start executing at the entry point declared in the ELF header.</p>

<p>Exec takes two arguments: the name of the file containing the executable and an array of string arguments.</p>

<p>This fragment replaces the calling program with an instance of the program /bin/echo running with the argument list echo hello. Most programs ignore the first argument, which is conventionally the name of the program.</p>

<p>The xv6 shell uses the above calls to run programs on behalf of users. The main structure of the shell is simple; see main (8001).</p>

<p>The main loop reads the input on the command line using getcmd. Then it calls fork, which creates a copy of the shell process. The parent shell calls wait, while the child process runs the command.</p>

<p>For example, if the user had typed ‘‘echo hello’’ at the prompt, runcmd would have been called with ‘‘echo hello’’ as the argument.</p>

<p>runcmd (7906) runs the actual command. For ‘‘echo hello’’, it would call exec (7926). If exec succeeds then the child will execute instructions from echo instead of runcmd.</p>

<p>At some point echo will call exit, which will cause the parent to return from wait in main (8001).</p>

<p>You might wonder why fork and exec are not combined in a single call; we will see later that separate calls for creating a process and loading a program is a clever design.</p>

<p>Xv6 allocates most user-space memory implicitly: fork allocates the memory required for the child’s copy of the parent’s memory, and exec allocates enough memory to hold the executable file. A process that needs more memory at run-time (perhaps for malloc) can call sbrk(n) to grow its data memory by n bytes; sbrk returns the location of the new memory.</p>

<p>Xv6 does not provide a notion of users or of protecting one user from another; in Unix terms, all xv6 processes run as root.</p>

<h3>感想</h3>

<p>とりあえずは基本的な導入部分が続きます。 ソースコードを見ていると、当たり前のことだけど、OSも 人間がプログラミングしたものだ、と感じるることができて なかなか感慨深いです。</p>

<p>並行してunix v6のソースコードも実はゆっくり読んでるんですが やはりソースコードの可読性やx86上で動作するということもあって 個人的には、xv6のほうが入りやすいかな、と感じています。</p>

<p>個人的に読むために、既に結構先まで翻訳してある(翻訳というのもおこがましい ようなもの)のですが、なかなかブログにまとめることができずに、ようやく ２回目です。</p>

<p>一応目標としては、卒業するまでに全編、理解も含めて読み終えることです。 頑張ります。</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[[CSCamp CTF]解けなかった問題forensics1のwriteupを読んでみた]]></title>
    <link href="http://KentaKomai.github.io/blog/2013/11/19/wordpress75/"/>
    
    <updated>2013-11-19T00:00:00+09:00</updated>
    <id>http://KentaKomai.github.io/blog/2013/11/19/wordpress75</id>
    
    <content type="html"><![CDATA[<h3>注意</h3>

<p>この記事はwriteup記事ではありません。 僕が出場しているときに、解くことができなかったので、公開されている writeupを読んで反省しよう、という内容です。</p>

<p>writeupを読みたい、という方はGoogle検索するといくつか 記事が公開されているので、そちらをどうぞ</p>

<p>今回読ませていただいたのは<a href="http://hacktracking.blogspot.jp/2013/11/cscamp-ctf-quals-2k13-forensics.html">こちら</a>のwriteupです。</p>

<h3>問題の概要（すごくザックリ）</h3>

<h4>本文</h4>

<pre><code>Databases are very critical. Thats why there is an always backup of the database.
Our database admin, John, had an attack and he lost all information in his database, 
thats why had to use the backup.Unfortunately, the back up was tampered by some 
script kiddie. The attacker added some fake users to the database. John is asking 
you if you can get the name of these users.
Flag is in this form: flag=md5("user1,user2,usern,...")
</code></pre>

<p>ハッキングされてデータベースの中身が消えちゃったので、バックアップファイル から復元しないといけないんだけど、バックアップファイルが改ざんされて、不正ユーザ が紛れ込んでしまいました。不正に追加されたユーザは誰ですか？ 全員の名前をカンマ区切りでmd5したものがフラグです。</p>

<p>といった問題</p>

<p>問題ファイルとして配布されていたのは、rarで圧縮されたファイルで 中身は以下のsqlファイル</p>

<pre>DROP TABLE `myTable`;

CREATE TABLE `myTable` (
  `id` mediumint(8) unsigned NOT NULL auto_increment,
  `name` varchar(255) default NULL,
  `password` varchar(255),
  `permission` mediumint default NULL,
  `score` varchar(100) default NULL,
  PRIMARY KEY (`id`)
) AUTO_INCREMENT=1;

INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Riley Holman","4BA964803B710605F6F7BBFF2CE81BF6",421,"77.88");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Maxine Austin","DE8E13534B39BA8354247F3F1EF85A82",428,"19.88");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Aretha Ball","A46E8222DCB12F466396586DD05F9604",436,"71.37");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Iliana Combs","4956611731BA8F4F4C52A67A0EA4917D",433,"18.58");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Sacha Evans","1F69275D041F9E5C8B43C2D0CF8A95FB",415,"23.13");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Gabriel Floyd","7DA5DF7C8615FD929CFA8F339924E896",416,"15.65");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Cole Pierce","223FB9108E9A85A2E9622F57DD0324F5",421,"70.29");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Carolyn Evans","2B5234CEC28F0253448C25D6816D782A",414,"90.68");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Jelani Rodgers","8B867BE7B0CF51723DFA50038852DDF5",428,"83.10");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Josephine Ratliff","02A7EB4D15539223833CBB2E9FDE85A9",426,"3.45");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Ginger Brooks","71653BA64D976CA38656F54EE9981F99",401,"53.71");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Yuri Suarez","3B8AF637C01F98508A479E010FA90A73",418,"18.35");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Ainsley Stone","562C32E3C78C0317CF7D0789731A918F",425,"35.04");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Molly Powell","BDAE91761A79770577E1F129B32ABD67",436,"32.12");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Alyssa Gregory","52CB473DFBE43624547FFB29700EB040",410,"22.62");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("August Rodgers","78057B4CFAE303BF262CD2CCDD0E01A8",433,"0.75");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Neville Todd","272E6DDAD05D3BFF92C5FA6EB7932424",436,"23.56");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Evan Cohen","120C001D3DD3700C0A2E5A79CBB07039",410,"59.59");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Deborah Garner","346184FCBFC7F7ADD557113284517A7A",447,"99.64");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Steel Richmond","72B3DA05A80855DD6F0874E9C8077E3E",402,"78.22");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Vielka Chambers","E9334B3C18AEF9F8136A0FB76AA5B989",412,"32.31");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Oleg Sherman","871589F79961AA75A701EBC466C0A8E2",448,"15.53");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Wyatt Humphrey","796E2F53AFBF930B1B762D237A1AA112",433,"65.41");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Kay Benson","D86025C1F02A1E270FA47552F6311B2E",413,"77.40");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Lacy West","6EC8DCB8E9A69A0E26446B78C3AA73AE",408,"29.38");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Hiram Hurst","02280B275C73EE7342ACFE7A6B44DBCE",444,"81.44");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Thaddeus Higgins","F996F6E35CA80D3DD14770CBE77C6635",401,"39.35");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Randall Pearson","F29286D07B348490C9D87503B66063C6",420,"72.95");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Grace Mckenzie","EB7F2337B70C4AAC1FC5B2CC9F805D94",431,"29.35");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Aurora Davis","C4640E4D2E7E07B52D1E7167641BE2EB",422,"12.14");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Geraldine Watts","743462B522085EA36BAD2EEDD1C8827F",421,"38.31");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Norman Durham","DEF31249723B8F56245F16C9FF1F5C33",435,"63.53");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Colorado Hess","C6A5DD9969ECB22B498E87F8DCB07F73",417,"37.14");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Cade Mcintyre","3F3C6CA38D531EBF73FF0BB13B870A03",434,"71.96");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Dillon Yang","10A498AC98890B90B5CD8750700BB5BC",419,"89.23");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Haley Branch","FEBB74414FA5BF1888E80F9BAE774D93",435,"51.42");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Finn Woods","2934E3E3EE577D5FD5890708BD1F86FB",400,"47.24");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Craig York","E6E25D7D443428CC84C00A1F28FE83E7",432,"73.24");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Rudyard Mejia","FA1DF603880504104B24EA3C37AA1741",408,"90.53");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Grace Todd","1CE546597AB7E7A254628DC2F4707DE9",429,"12.74");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Sasha Velez","E448BE33DADF0262A4FD3453B225BF49",413,"47.03");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Kieran Bryant","F753400403B3EF3C37173399F9D9E6BD",443,"45.67");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Alfreda Beach","20161525318F501C456D40AEE19CE9D0",433,"62.25");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Vernon Joyce","C4917BA71B8EFE4D358149A074D8EC0B",402,"65.50");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Maryam Sandoval","867F728527AFAF7B30648A219F150C28",407,"57.94");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Lila Lindsey","AC1FE8AD294ED542DF4E930E4C0CEA58",419,"42.03");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Ifeoma Larsen","4F211C6FAB4C9417D58B94C626BBC231",403,"80.25");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Hermione Craig","2292D579EBA69FE5821E58A15C56DBA0",446,"8.18");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("David Crane","B9A586FFFFD480676E183EDAB94C78F3",406,"91.12");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Mercedes Lott","A089077408B7E996D7483DC055097A21",437,"18.61");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Melodie Patton","C2212ACA95303B5BE38E9DE249455F11",406,"52.03");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Denise Cardenas","4FEF84297DF3C2BBB89EC332824948B9",423,"63.72");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Martha Livingston","0EB9689A5B506DA5AD8D5B1FF9B90521",413,"88.61");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Sarah Owen","B645BFAB686B33309F28FC38D9AED798",445,"73.31");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Selma Simon","9C8530BE4F25827013490D4EAB83A503",408,"75.45");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Kylan Mcfadden","5954E473C9BDBE24FF8EA46DECE2F7C5",403,"13.68");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Avram Miranda","F5132BE06D2BC14BC8297E7ADF6307DF",442,"8.17");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Wanda Chambers","FB002E2DA3160A89271C50380A508428",400,"12.05");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Courtney Le","21AFCE12ECB8E29B8AE0B96B2BDAB12D",410,"83.37");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Shay Short","FCF2ABE3A0D5974A2E1D0CBA8DD60B30",424,"63.03");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Chanda Clarke","2E05813EBA25D06B137CC4A25565D980",423,"29.56");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Leroy Haney","FB9D640C103D264E2985EDB4B4DBC61C",406,"7.14");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Nadine Michael","8FA40B7DDE2B1C36B12FD7D834A065AF",415,"41.12");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Drew Donaldson","5FB3DA68B2C2DE5DBDA41EF155B4AF7F",449,"15.88");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Daniel Crane","CE95AB2D9026CF010F1146D80C00C438",408,"67.83");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Ross Stuart","C80920C8DC9EC9FED6B668764BADE7BB",401,"78.26");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Octavius Gamble","2C1B9D48AD88BE425C9C146E3E9EE531",405,"43.60");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Fredericka Rice","B303DEC6AAAC075C8A37D21C06F185E3",426,"71.67");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Vance Huff","5D3C7E74FFAB75FF210F27F4F422C1A2",446,"45.38");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Shaine Ward","6C6AB557DA6CD8DCA4BF3016C20F0EE7",432,"69.75");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Ezekiel Bush","5A7C8125EB2A6665A66038129F00952E",401,"3.46");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Lewis Nguyen","8ADD9803F69410A13335C26CCCFAD855",410,"31.50");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Catherine Daniel","CB30AAAEBA9DDC0383A5F74A4DFA02DD",443,"16.57");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Barry Shepherd","8B7772040D5358EB85F2AD14D32B1389",449,"82.82");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Adrienne Benton","621B2E06494F1AF44C58A9A5BEE5EE64",403,"50.67");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Jillian Alston","3609AAEAC8A0C7652008BE60C5616E1A",415,"52.98");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Chanda Dickson","FD2A9A4A7C0CE0C6CADC723991B36E76",437,"56.76");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Lara Benson","535FA2060136DE4A56DFFFB369AD53EA",422,"0.21");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Deborah Moreno","16A86BBD8913F80F80AB7354982306D1",440,"70.72");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Keaton Navarro","3360C02FFA0F219D8C3D5C09C67E3087",413,"97.27");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Wanda Justice","0F90F41E6374B479A49400BE4B7B0630",419,"5.66");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Sacha Briggs","513386AC2F4B995D9598A5055686C582",423,"33.26");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Nevada Gordon","F10C3F1F9A46490C35D9B3210893F58F",420,"28.47");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Leilani Rivas","A9E928D9D79ABF74AB6CCF6FEB8E21AC",434,"98.00");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Kylie Green","D136FAF95F0AAB1770E7F9FDC189B1E8",411,"10.19");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Brian Welch","2CFC1ECC98D00DE7D87B484E46CD9ECC",435,"11.88");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Orson Livingston","DA593D64D4251BCC040E86B50A1C5D52",426,"3.11");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Mikayla Ratliff","C820573A8E75FB5D3C99D3BA99FB1A7D",408,"38.26");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Mechelle Stout","8113A0AFF55D9262FAD9378E8365514E",409,"49.53");
INSERT INTO `myTable` (`name`,`password`,`permission`,`score`) VALUES ("Gay Buck","D5CC5123B49E33CC7356B8C1EE5D1AEE",402,"77.25");

</pre>


<p>これをmysqlに実際に作成して、色々ソートしたり、名前をひとつひとつググってみたり したけど、特にアテはありませんでした・・・。 (名前はどれをGoogle検索してもFacebookやYoutubeが出てくる、いわゆるよくある名前っぽい)</p>

<p>permissionの値が400-449の範囲だったので、もしかしたらこの数字は Linuxなどで用いられるファイル権限の数字ではないか、と思って 408やら449やらの、変なpermissionの値を持ったユーザを抽出してみたりしたけど、 これもダメでした。</p>

<p>そこで競技終了後に参加者の方が公開してくださったwriteupを拝見させていただきました。 <a href="http://hacktracking.blogspot.jp/2013/11/cscamp-ctf-quals-2k13-forensics.html">こちら</a></p>

<pre># names=$(while read line; do hex=`echo "$line" | xxd -p | tr -d '\n'`; if [ "`echo $hex | grep 0d`" != "" ]; then echo "`grep -A 1 "$line" dataNov-8-2013.sql | tail -n 1 | awk -F '"' '{print $2}'`"; fi; done &lt; dataNov-8-2013.sql | tr '\n' ',')
# echo -n ${names:0:-1} | md5sum
</pre>


<p>これでフラグが出ています。すげー！ ちょっとパッと見何をしているかわからなかったので 読みやすく直してみる</p>

<p></pre></p>

<pre># names=$(
    while read line;    #dataNov-8-2013.sqlを１行ずつ読み込んで$lineに格納
    do
        hex=`echo "$line" | xxd -p | tr -d '\n'`;   # $lineを16進数に変換し、改行文字を削除し$hexに格納
        if [ "`echo $hex | grep 0d`" != "" ];       # $hexの中に0dが含まれていればtrue
        then
            # $lineの後ろ１行だけを抜き出し、その行を " で区切り二つめをprintする(つまり名前)
            echo "`grep -A 1 "$line" dataNov-8-2013.sql | tail -n 1 | awk -F '"' '{print $2}'`"; 
        fi;
    done
    &lt; dataNov-8-2013.sql | tr '\n' ',') # 最後に抽出した名前一覧の改行をカンマに変換して$nameに格納
# echo -n ${names:0:-1} | md5sum # # namesの最初から最後まで全て出力し、md5にする
</pre>


<p>つまりポイントは0x0dで、これが含まれる行の次の行に含まれるユーザが不正に追加されたユーザである という内容のスクリプトでした。</p>

<p>これはどういうことか、というと、0x0dはキーボードでいう「Enter」キーのコード。 ここでキーボードのEnterが押されて、次の行が挿入された可能性がある、ということ だと思います。</p>

<p>この発想はなかった・・・orz</p>

<p>これに関して、以下の記事が非常に参考になりました。ありがとうございました。</p>

<p><a href="http://ash.jp/code/return.htm">改行コードの話</a></p>

<p>hexdump -C したものをファイルに出力してvimで見てみました。</p>

<p><a href="http://i1.wp.com/komaken.me/blog/wp-content/uploads/2013/11/Screen-Shot-2013-11-19-at-0.38.59.png" rel="image_group"><img src="http://i0.wp.com/komaken.me/blog/wp-content/uploads/2013/11/Screen-Shot-2013-11-19-at-0.38.59-1024x524.png?fit=955%2C488" alt="Screen Shot 2013-11-19 at 0.38.59" class="alignnone size-large wp-image-936" data-recalc-dims="1" /></a></p>

<p>うわ・・・確かに正規に追加されたと思われる0x0a(LF)とは別に0x0d(CR)が含まれている 行が５行だけある・・・一度バイナリエディタで中身みたのに・・・うぅ・・・</p>

<p>というわけで不正ユーザは Aurora Davis,Melodie Patton,Octavius Gamble,Lara Benson,Leilani Rivas の５人でした。</p>

<p>とても勉強になりました。</p>

<p>CSCamp CTFの運営のみなさん、一緒に参加してくれたよかろうもんのメンバーのみなさん、writeupを公開してくれている他の参加者の方々 ありがとうございました。</pre></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Vagrant + Chef solo + Berkshelfを試してみたのでまとめ]]></title>
    <link href="http://KentaKomai.github.io/blog/2013/11/18/wordpress74/"/>
    
    <updated>2013-11-18T00:00:00+09:00</updated>
    <id>http://KentaKomai.github.io/blog/2013/11/18/wordpress74</id>
    
    <content type="html"><![CDATA[<p>xv6ソースコードの読解とテキスト翻訳はどうした、と言われそうですが、 なかなかまとまった時間じゃないと作業進まなくて、ちょっとしたスキマ時間 では、溜まってた試してみたいことなんかをやっています。</p>

<p>今回はVargrant + chef solo + Berkshelfという構成に関してです (本筋のxv6に関してもちゃんと進めてます、ゆっくりですが・・・)</p>

<h2>目的</h2>

<p>例えばチームで開発を行うときに、開発されているソースコードを 実行する環境は、プログラマ、デザイナー、テスターでそれぞれ ローカルに用意することが多いですが</p>

<p>その場合、往々にして発生する問題が「僕のところでは動いているのに、 他の人の環境になると動かない・・・」という問題。プログラマはUbuntu、デザイナーは Mac、テスターはwindowsなんてよくありそう。</p>

<p>その原因はOSだったりインストールされている他のモジュールのバージョンが 違っていたりと、挙げるとキリがないほどあります。並行作業してる 他のプロジェクトで行った設定が原因で動かない、なんてことがあると、 どうしようもなくなります。</p>

<p>それらを解決してくれるのが今回のVagrantと、併せて利用する ツール群</p>

<p>「ある目的を実現するための環境や設定を専用に用意し、 チーム（または個人）共通のものとして構築する」などの目的で利用すると便利 です。</p>

<p>WEB開発を複数プロジェクト進めていくとVirtualHost設定がどんどん膨れ上がったりしていく のは僕にも経験があります。いちいちVirtualHost設定じゃなくて、専用の環境があったら （しかも簡単に構築できたら）ありがたいですよね。</p>

<h2>概要</h2>

<p>この記事ではopscodeからcookbookのひな形を ダウンロードし、仮想環境でそれらをそのまま実行するまでを 紹介します。（とりあえず使ってみたい人向け）</p>

<p>それぞれのソフトウェアやOSの細かい設定などは取り扱ってません。 僕が必要になれば別途記事にまとめるかもしれません。</p>

<h3>1. Vagrant</h3>

<p>異なる環境に簡単に以降できる開発環境を構築・管理して配布したり することができる環境構築ツール。</p>

<p>環境に関する設定ファイル(VagrantFile)を ヴァージョン管理すれば、環境が変わっても、コマンド一発で環境を消して また再構築するだけで済みます。デフォルトでフォルダ共有設定も行ってくれます。</p>

<h3>2. Chef solo</h3>

<p>サーバ構成を管理するためのツール。本来はサーバとクライアントを用意して サーバをクライアントから確認することで、サーバ構成を共通にするツール(Chef serverとChef client) ですが、それをCookbookと呼ばれる構築手順が記述されたファイルに添って クライアント/サーバモデルでなく、１台でも構成を管理できるようにしたものが chef solo(であってますよね・・・？)</p>

<p>こちらもchef soloに関する専用のディレクトリをチーム間でバージョン管理すれば すぐに、サーバに設定変更を反映させることができます。</p>

<p>イメージ的には</p>

<ul>
<li>VagrantはVMそのものを作成するためのツール</li>
<li>Chef soloはVagrantで作成したVM（仮想環境）に指定したツールのインストールや設定を自動で行うツール</li>
</ul>


<p>という感じです。</p>

<h3>3. Berkshelf</h3>

<p>Vagrant + Chef Soloでも１から仮想環境を構築(設定も含む)することに比べたら、 かなり自動化が進むのですが、さらにBerkshelfを利用することで、 Chef soloで用いるcookbook（インストールしたいソフトウェアと、 その設定などが記述されたファイル）のひな形を自動で取得・生成することが可能になります。</p>

<p>ここまで来ると、手作業でするのは、いよいよ環境独自に必要な細かい設定だけになります。 インストールするだけならひな形だけでも問題ないので、コマンド入力以外の手作業を、 ほぼ全部省略して環境構築が終わります。</p>

<hr />

<p>今回利用するツールは以上３つです。</p>

<h2>インストール</h2>

<p>僕はMacOSC 10.9 Mervericks上で動作を確認しています。</p>

<h3>Vagrantのインストール</h3>

<p><a href="http://www.vagrantup.com/">Vagrant公式サイト</a>から.dmgファイルをダウンロードして インストールするだけ。</p>

<p>インストールができているかの確認は</p>

<pre>$ vagrant --version
</pre>


<p>で表示されればOKです。僕の環境では1.3.5です。</p>

<h3>Chef solo, Berkshelfのインストール</h3>

<pre>$ gem i chef --no-ri --no-rdoc          //chefのインストール
$ gem i knife-solo --no-ri --no-rdoc    //knifeのプラグインknife soloのインストール
$ gem i berkshelf --no-ri --no-rdoc     //berkshelfのインストール
</pre>


<p>※gemコマンドにはrubyが必要です。まずはgemがインストールされているかチェックしてください</p>

<h2>超ざっくり使い方手順</h2>

<p>※インストールまでは終わってる状態です。</p>

<h3>1. [Vagrant編] ひな形のOSイメージをインストールする</h3>

<p>URLはboxファイルが存在するパスかURLを指定してあげます。</p>

<p><a href="http://www.vagrantbox.es/">ここ(Vagrant.es)</a> に有志で配布されている様々な環境のboxが公開されています。 ※あくまで有志なのでリンクが切れていたり、チュートリアルがスムーズに 進まない場合があるboxも含まれているので注意してください。</p>

<p>チュートリアルでは<a href="http://files.vagrantup.com/precise32.box">http://files.vagrantup.com/precise32.box</a> が利用されている場合が多いです。</p>

<pre>$ vagrant box add [box名(任意)] [Path or URL]
</pre>


<h3>2. [Vagrant編] VMを作成する</h3>

<p>カレントディレクトリに設定ファイルが作成されるため 可能であれば、専用のディレクトリを作成することをオススメします。</p>

<pre>$ mkdir vagrantSmaple; cd vagrantSampe //専用フォルダを作成し移動
$ vagrant init [box名]               //インストールされているboxを元に設定ファイルを作成
</pre>


<p>これを終えた段階でカレントディレクトリにVagrantFileという 環境設定のためのファイルが作成されます。</p>

<p>必要があれば、こちらを編集することでVMの設定を変更することができます。</p>

<pre>config.vm.network :private_network, ip: "192.168.33.10"$
</pre>


<p>例えば、コメントアウトされている上記の行をアンコメントすることで 仮想環境に固定IPアドレスが割り当てられます。</p>

<h3>3. [Vagrant編] VMを起動する</h3>

<pre>$ vagrant up
</pre>


<p>初回起動時のみ、boxからVMを構築するため若干時間がかかります。 プロビジョニング(chefなどで環境設定を行う処理)も初回起動時のみ 動作します（Vagrant 1.3.0以降）</p>

<p>あとは</p>

<pre>vagrant ssh
</pre>


<p>で環境にsshログインができます。 ちなみに、sshログインは公開鍵暗号で行われており~/.vagrant.d/insecure_private_keyが 秘密鍵になっています。</p>

<p>ssh設定を確認したいときは</p>

<pre>$ vagrant ssh-config --host [host名(省略した場合はdefault)]
</pre>


<p>で表示することができるので</p>

<pre>$ vagrant ssh-config --host [host名] >> ~/.ssh/config
</pre>


<p>することで自分の環境から簡単にログインできるようになります。</p>

<h3>番外 [Vagrant編] プラグインとコマンド補足</h3>

<p>その他、よく使いそうなコマンド集</p>

<pre>$ vagrant box list      //boxの一覧
$ vagrant box remove    //boxの削除
$ vagrant halt          //VMの終了
$ vagrant reload        //VMの再起動
$ vagrant status        //現在の全VMの状態
</pre>


<p>いろんな人がすすめてるプラグイン</p>

<pre>$ vagrant plugin install vagrant-berkshelf  //berkshelf使うためのプラグイン
$ vagrant plugin install vagrant-omnibus    //VMにchefがインストールされているかチェックしてくれる
$ vagrant plugin install sahara             //VMのロールバックをできるようにしてくれる
</pre>


<p>これらの解説はこの記事ではしていません。 もし必要であればぐぐってみてください。(この記事でやってることは 多分なくてもできると思う)</p>

<h3>1. [Chef solo + Berkshelf編] Chefの設定ファイルなどを格納する専用ディレクトリのひな形を作成する</h3>

<p>VagrantFileが作成されたディレクトリで</p>

<pre>$ Knife solo init [ディレクトリ名（任意）]
</pre>


<p>を実行することで、ひな形が作成されます。chef-repoというディレクトリ名が つけられるケースを、ぐぐった限りではよく見かけました。</p>

<h3>2. [Chef solo + Berkshelf編] Berkshelfでダウンロードしたいcookbookのひな形を決定する</h3>

<p>前述の手順でchef専用ディレクトリを作成すると、そのディレクトリの中に BerksFileというファイルが作成されます。(chef-repoという名前をつけたことにします。)</p>

<p>このファイルで、どのひな形を入手するかを 記述します。(なければ自作してOKです。)</p>

<pre>site :opscode
cookbook 'python'
cookbook 'nginx'
cookbook 'git'
</pre>


<p>とりあえず上記がサンプル。</p>

<p>opscodeというcookbookを公開している場所からpythonとnginxとgitの cookbookをダウンロードすることを意味しています。</p>

<p>ちなみにopscodeのcookbookは<a href="https://github.com/opscode-cookbooks">こちら</a></p>

<p>この中にあるものであれば、誰でも好きに利用できるようです。</p>

<p>編集が終わったら</p>

<pre>$ berks install --path cookbooks/
</pre>


<p>とすることでcookbookをダウンロードし、chef-repo/cookbooks/ディレクトリの中に 関連するファイル群を保存してくれます。</p>

<p>この中で、それぞれのソフトウェアに対する設定なんかを記述できますが、今回は 省略（色々ありすぎるので）</p>

<p>とりあえず一連の流れを利用できることを目標にしています。</p>

<h3>3. [Chef solo + Berkshelf編] 構築した仮想環境にchefをインストールする</h3>

<p>chefを仮想環境上で動作させるためには、仮想環境自体にchefが入っていることが必要です。</p>

<p>そのため、仮想環境にchefをホストからインストールします。</p>

<pre>$ knife solo prepare [user name]@[VMのIPアドレス] -i ~/.vagrant.d/insecure_private_key
</pre>


<p>でホストから仮想環境へchefのインストールができます。 もし、</p>

<pre>ERROR: Net::SSH::HostKeyMismatch: fingerprint XXXXXXXXXXXXXXXXXXXXXXXXX.....
</pre>


<p>というエラーが出たら、~/.ssh/known_hostsにVMのIPアドレスの情報が残っている可能性があるので、 その１行を消して下さい。~/.ssh/known_hostsをIPアドレスで検索すればすぐに見つかると思います。</p>

<pre>$ vagrant ssh-config --host [host名] >> ~/.ssh/config
</pre>


<p>していれば</p>

<pre>$ knife solo prepare [host名]
</pre>


<p>でももちろん実行可能です(わざわざ書かなくてもいいか・・・)</p>

<p>ここまで実行するとchef-repo/nodes/ の中にjsonファイルが生成されます。(default.jsonとか、[host名].json) いよいよもう少しです。</p>

<h2>4. [Chef solo + Berkshelf編] VMにcookbookで指定したソフトウェアのインストールや設定を反映させる</h2>

<p>chef-repo/node/の中に入っているjsonファイルに、実際に利用するcookbookを指定してあげます。</p>

<pre>{ 
    runlist:[
    ]
}
</pre>


<p>というひな形があるので、runlistの中に実際に実行するcookbookの名前を記述します。</p>

<pre>{ 
    runlist:[
        'python',
        'git',
        'nginx'
    ]
}
</pre>


<p>これでOK。</p>

<p>最後に、実際に仮想環境にこれらをインストールすることを指示してあげます。 (※カレントディレクトリはchef-repoです)</p>

<pre>$ knife solo cook [user name]@[VMのIPアドレス] -i ~/.vagrant.d/insecure_private_key nodes/[host名].json
もしくは
$ knife solo cook [~/.ssh/configに追加したhost名] nodes/[host名].json
</pre>


<p>するだけ。これで対象の仮想環境にpythonとnginxがインストールされました。 めでたしめでたし。</p>

<hr />

<p>以上です。 とりあえずcookbookのひな形をもってきてインストールするだけ。までをやりました。 次回またまとまった内容があれば、プロビジョニングやアプリケーション、OSの細かい設定 などを行っていきたいと思います。 (この記事の内容だけだとnginxはインストールされただけで、実行されてないしｗ)</p>

<h2>参考にさせていただいたリンク</h2>

<ul>
<li><a href="http://qiita.com/taiki45/items/b46a2f32248720ec2bae">今っぽい Vagrant + Chef Solo チュートリアル</a></li>
<li><a href="http://qiita.com/koizuss@github/items/599b453bf3e38f825027">knife solo prepare で ERROR: Net::SSH::HostKeyMismatch:</a></li>
<li><a href="http://www.amazon.co.jp/%E5%85%A5%E9%96%80Chef-Solo-Infrastructure-as-Code-ebook/dp/B00BSPH158">入門Chef Solo &#8211; Infrastructure as Code(Kindle本)</a></li>
<li><a href="http://www.msng.info/archives/2013/09/vagrant-1-3-0-no-provision.php">Vagrant 1.3.0 からは2回目以降の起動時にプロビジョニングが自動で走らないので注意</a></li>
</ul>


<hr />

<h3>追記</h3>

<h4>2013/11/18</h4>

<ol>
<li><p>リンク先が違っているとご指摘いただいたので、修正いたしました。</p></li>
<li><p>コメントにいただいているように、Vagrant-Berkshelfプラグインを導入すると更に手順を簡略化することもできそうなので 後日手元で動作を確認後、文章がまとまればブログにしてみたいと思います。機会があれば読んでいただけると嬉しいです。</p></li>
</ol>


<p>よろしくお願いします(・∀・)</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[xv6のソースコードとテキストを読んでみる1_chapter0_1]]></title>
    <link href="http://KentaKomai.github.io/blog/2013/11/10/wordpress73/"/>
    
    <updated>2013-11-10T00:00:00+09:00</updated>
    <id>http://KentaKomai.github.io/blog/2013/11/10/wordpress73</id>
    
    <content type="html"><![CDATA[<p><a href="http://komaken.me/blog/2013/10/28/xv6%E3%81%AE%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%81%A8%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%82%92%E8%AA%AD%E3%82%93%E3%81%A7%E3%81%BF%E3%82%8B-0/">前回</a>に書いたとおり、 Unix v6の移植版xv6のソースコードと、テキストを読んでいこうと思います。</p>

<p>本当はchapterごとに１記事書いていこうと思ってたんですが、 思っていた以上に僕の英語力がダメで翻訳にものすごい時間かかってしまっているので、 chapter内でもキリのいいところで、紹介していこうと思います。</p>

<p>翻訳ははっきりいってかなりお粗末なもので、 僕が独自に解釈したものが多く含まれています。</p>

<p>間違った内容が載っている可能性もあります。ご注意ください。 (※お気づきの方いらっしゃいましたら、教えてくれるととてもありがたいです。)</p>

<p>概要が伝わること、少しでも興味を持つきっかけなんかになれば とても嬉しく思います。</p>

<h2>Chapter 0</h2>

<h3>OSのインターフェース</h3>

<p>OSの仕事は複数のプログラムや複数のサービスを提供し、 低レイヤーのハードウェアの動作を管理して、抽象化します。</p>

<p>またOSはインターフェースを通してユーザが作成したプログラムに OSのサービスを提供します。より良いインターフェースをデザインすることは 難しいことです。私達プログラマは実装を正しく簡単に行うために、 シンプルで簡単なインターフェースを望むこともあれば、 アプリケーションに多くの機能を盛り込みたい場合、複雑で詳細に設定したり命令可能な インターフェースを望むこともあります。この２つの言い分をバランス良く解決する 方法として、多くの一般的な機能を抽出して、それらを結合することもできる、 いくつかのメカニズムに依存するインターフェースをデザインする必要があります。</p>

<p>(中略)</p>

<p>実行されているプログラムはプロセスと呼ばれ、テキスト、データ、 そしてスタックをメモリ上に保持しています。 テキストはプログラムの命令が、データには演算に利用される 変数など、そしてスタックはプログラムのプロシージャが含まれています。 (ここはかなり僕の解釈で原文ままではない、と思います。)</p>

<p>プロセスがカーネルが提供するサービスを利用するときは、OSのインターフェース 経由で呼び出します。そのような命令をシステムコールと呼びます。システムコールは カーネルの内部に入り込み、サービスを実行し結果を返します。このように ユーザプログラムがシステムコールを利用するとき、 プロセスはユーザスペースとカーネルスペースの間を行き来します。</p>

<p>カーネルは、それぞれのプロセスが自身のユーザスペースで実行されることを確実にするために、 CPUのプロテクション機構を利用し、保護を実現するために必要な権限で実行されます。 ユーザプログラムにこの権現はありません。ユーザプログラムがシステムコールを呼び出すときは ハードウェアで権限を上げ、カーネルで準備された機能を実行します。</p>

<p>xv6カーネルが提供するシステムコールは以下の通りです。</p>

<pre>fork()  プロセスを作成する
exit()  現在のプロセスを終了する
wait()  子プロセスが終了するのを待つ
kell(pid)   pidのプロセスを終了する
getpid()    現在実行中のプロセスを返す
sleep(n)    n秒プロセスをスリープする
exec(filename, *argv)   ファイルを読み込み実行する
sbrk(n) プロセスのメモリをn byte拡張する
open(filename, flags)   ファイルを開く。フラグは read / write
read(fd, buf, n)    ファイルを n byte読み込む
write(fd, but, n)   ファイルに n byte書き込む
close(fd)   開いたファイルを閉じる
dup(fd) ファイルコピー
pipe(p) 
chdir(dirname)  カレントディレクトリの変更
mkdir(dirname)  ディレクトリを新規作成する
mknod(name, major, minor)   デバイスファイルを新規作成する
fstat(fd)   ファイルの詳細を返す
link(f1, f2)    f1のリンクをf2に作成する
unlink(filename)    ファイルを削除する
</pre>


<p>シェルはユーザが入力したコマンドを読み込み、実行する通常の ユーザプログラムであり、カーネルの一部ではありません。これはシステムコールの インターフェースのおかげで、シェルは内部的にシステムコールを利用しているだけです。</p>

<p>そのためUnixではシェルをsh,bash,zshなど、それぞれユーザが 好きなものに変更することが可能になっています。</p>

<h3>原文</h3>

<p>後ほど復習と確認のため、今回書いた場所の原文も中略した部分を含めて載せておきます。(図やイメージなどは省略してます。)</p>

<p><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;ved=0CCoQFjAA&amp;url=http%3A%2F%2Fwww.cs.columbia.edu%2F~junfeng%2F11sp-w4118%2Flectures%2Funix.pdf&amp;ei=nGt-UorzKI2jkgW8kIDQAw&amp;usg=AFQjCNFvDyV-VUcoFSYuBed2Vu090cvxkw&amp;sig2=4hqRhlAF7nIFcZ4PdU1CfA&amp;bvm=bv.56146854,d.dGI">オリジナル</a></p>

<p>The job of an operating system is to share a computer among multiple programs and to provide a more useful set of services than the hardware alone supports. The operating system manages and abstracts the low-level hardware, so that, for example, a word processor need not concern itself with which type of disk hardware is being used. It also multiplexes the hardware, allowing many programs to share the computer and run (or appear to run) at the same time. Finally, operating systems provide con- trolled ways for programs to interact, so that they can share data or work together.</p>

<p>An operating system provides services to user programs through an interface. Designing a good interface turns out to be difficult. On the one hand, we would like the interface to be simple and narrow because that makes it easier to get the imple- mentation right. On the other hand, we may be tempted to offer many sophisticated features to applications. The trick in resolving this tension is to design interfaces that rely on a few mechanisms that can be combined to provide much generality.</p>

<p>This book uses a single operating system as a concrete example to illustrate oper- ating system concepts. That operating system, xv6, provides the basic interfaces intro- duced by Ken Thompson and Dennis Ritchie’s Unix operating system, as well as mim- icking Unix’s internal design. Unix provides a narrow interface whose mechanisms combine well, offering a surprising degree of generality. This interface has been so successful that modern operating systems—BSD, Linux, Mac OS X, Solaris, and even, to a lesser extent, Microsoft Windows—have Unix-like interfaces. Understanding xv6 is a good start toward understanding any of these systems and many others.</p>

<p>As shown in Figure 0-1, xv6 takes the traditional form of a kernel, a special pro- gram that provides services to running programs. Each running program, called a process, has memory containing instructions, data, and a stack. The instructions im- plement the program’s computation. The data are the variables on which the computa- tion acts. The stack organizes the program’s procedure calls.</p>

<p>When a process needs to invoke a kernel service, it invokes a procedure call in the operating system interface. Such procedures are call system calls. The system call enters the kernel; the kernel performs the service and returns. Thus a process al- ternates between executing in user space and kernel space.</p>

<p>The kernel uses the CPU’s hardware protection mechanisms to ensure that each process executing in user space can access only its own memory. The kernel executes with the hardware privileges required to implement these protections; user programs execute without those privileges. When a user program invokes a system call, the hardware raises the privilege level and starts executing a pre-arranged function in the kernel. The collection of system calls that a kernel provides is the interface that user pro- grams see. The xv6 kernel provides a subset of the services and system calls that Unix kernels traditionally offer. The calls are:</p>

<p>he rest of this chapter outlines xv6’s services—processes, memory, file descrip- tors, pipes, and file system—and illustrates them with code snippets and discussions of how the shell uses them. The shell’s use of system calls illustrates how carefully they have been designed. The shell is an ordinary program that reads commands from the user and exe- cutes them, and is the primary user interface to traditional Unix-like systems. The fact that the shell is a user program, not part of the kernel, illustrates the power of the sys- tem call interface: there is nothing special about the shell. It also means that the shell is easy to replace; as a result, modern Unix systems have a variety of shells to choose from, each with its own user interface and scripting features. The xv6 shell is a simple implementation of the essence of the Unix Bourne shell. Its implementation can be found at line (7850).</p>

<h2>感想</h2>

<p>この辺の導入部分は、ひとまず知識としては既に知っていることも多く、内容の理解よりも 翻訳に時間がかかりました。</p>

<p>今回はソースコードを読む箇所はゼロ。</p>

<p>そしてシステムコールの数すくない！ここには載せていませんが、ソースコードも9000行未満です。 頑張って最後まで読みたいなぁ。</p>

<p>結構書き溜めているので、できればサクサク次の記事アップロードしたいです。</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[シェルでコマンド実行するときに使う記号の用法まとめ]]></title>
    <link href="http://KentaKomai.github.io/blog/2013/11/10/wordpress72/"/>
    
    <updated>2013-11-10T00:00:00+09:00</updated>
    <id>http://KentaKomai.github.io/blog/2013/11/10/wordpress72</id>
    
    <content type="html"><![CDATA[<p>めっちゃくちゃ基礎的な内容。</p>

<p>xv6のソースコード読み進めているうちに、 自分がちゃんと理解して使えていない箇所があったので 軽く覚書しておきます。</p>

<h2>1.コマンドラインのキー操作</h2>

<p>いきなりブログの本題から少し離れちゃいますが、長いコマンド 打つの面倒で、履歴から探すんだけど、末尾だけ文字を変える必要がある、 なんてことよくありますよね。</p>

<p>そういうときに便利なカーソル移動なんかを付随的に見つけたので 書いておきます。</p>

<ol>
<li>Ctrl + F(カーソルを一文字右へ)</li>
<li>Ctrl + B(カーソルを一文字左へ)</li>
<li>Ctrl + D(カーソルの文字を削除)</li>
<li>Ctrl + A(カーソルを行頭へ)</li>
<li>Ctrl + E(カーソルを行末へ)</li>
<li>Ctrl + K(カーソル位置から行末までを削除)</li>
<li>Alt + F(カーソルから１単語あとに移動)</li>
<li>Alt + B(カーソルから１単語前に移動)</li>
<li>Alt + D(カーソルから１単語を削除)</li>
</ol>


<p>vimキーバインドと動作もコマンドも似てるけど、若干ニュアンス違う・・・。 hjklで動けたらいいねぇ。</p>

<p>と思ったらできました。<a href="http://builder.japan.zdnet.com/os-admin/20372652/">参考リンク</a></p>

<p>ただ、僕の現状の設定だとインサートモードかどうかの判別が カーソルでできないから、正直不便かも・・・というわけでもどしました・・・。</p>

<h2>2.リダイレクション</h2>

<p>標準入力、標準出力、標準エラー出力をそれぞれ任意のファイル等に指定してあげる 方法。慣例的に標準入力は0、標準出力は1,標準エラー出力は2という数字が割り当てられて いる、と知らない場合は覚えておくと便利かもしれません。</p>

<pre>>   標準出力をファイルに設定する（上書き）
>>  標準出力をファイルに設定する（ファイルの最後に追記）
&lt; 標準入力をファイルに設定する
2>  標準エラー出力をファイルに設定する（上書き）
2>> 標準エラー出力をファイルに設定する（追記）
&#038;>  標準出力と標準エラー出力を同じファイルに設定する
</pre>


<h2>3.パイプ</h2>

<p>あるコマンドの標準出力と、他のコマンドの標準入力を接続してくれる機能。 あるコマンドの結果を、更に別のコマンドに渡したいときなんかに便利です。</p>

<p>ex) $ dmesg | head</p>

<p>これでブート時のメッセージの最初の10行だけを出力してくれます。 コマンドラインからバイナリを簡単に確認したいときに</p>

<p>$ hexdump -C a.out | less</p>

<p>とかよくやりますね。</p>

<p>標準入力からデータを受け取って、整形して標準出力に出してくれる フィルタコマンドの代表的なものを挙げます。これをパイプの間で利用すれば、 さらに柔軟に出力を整形できるかもしれません。</p>

<pre>tr  文字列置換
uniq    重複行の排除
wc      文字数や行数のカウント
head    ファイルの先頭部分の表示
tail    ファイルの末尾部分の表示
cut     各行から選択した範囲を抜き出して出力
sort    ソートする
od      ファイルの内容を８進数や１６進数で表示
cat     ファイルの内容をそのまま表示
</pre>


<p>コマンドとしてどう記述すると使えるか、ということを覚えるだけでも とても便利なんですが、動作に関してはxv6に関するブログで 紹介できればと思います。</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[xv6のソースコードとテキストを読んでみる 0]]></title>
    <link href="http://KentaKomai.github.io/blog/2013/10/28/wordpress71/"/>
    
    <updated>2013-10-28T00:00:00+09:00</updated>
    <id>http://KentaKomai.github.io/blog/2013/10/28/wordpress71</id>
    
    <content type="html"><![CDATA[<p>きっかけはなんとなくジャケ買いした<a href="http://www.amazon.co.jp/%E3%81%AF%E3%81%98%E3%82%81%E3%81%A6%E3%81%AEOS%E3%82%B3%E3%83%BC%E3%83%89%E3%83%AA%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0-~UNIX-V6%E3%81%A7%E5%AD%A6%E3%81%B6%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB%E3%81%AE%E3%81%97%E3%81%8F%E3%81%BF-Software-Design/dp/4774154644">こちらの書籍</a></p>

<p>Unix v6のソースコード約10,000行を読み解いて、OSの基礎を学ぼう、という本です。</p>

<p>最初のほうは『とりあえずざっくりは知ってるけど、詳しくは知らない』程度の内容が多かったので、 「こうなってたのかー」とおもしろく読めていたのですが、内容が進んでいくにつれて、 ソースコードを参照しながら確認する箇所が増えていき、K＆RのCで書かれていたソースコードを読むのが辛くなってきました。</p>

<p>ちょっと最後までモチベーションを保ったまま読み終えることが、僕の頭では難しそうだった為、 もうちょっと敷居の低いものがないかなー・・・と探してみたところ、Unix v6をANSI Cで書き直し、 x86で動作するように再実装したxv6というものを発見しました。</p>

<p>MIT(マサチューセッツ工科大学)のオペレーティングシステムクラスの授業で利用されて いたようで、100ページほどのテキストも一緒に配布されていました。</p>

<p>僕の英語力は僕を知っている方はご存知の通り、ご愁傷様としか言えませんが 継続できそうな物量と内容なので、ブログで少しづつ翻訳したりソースコード読んで、 中身を勉強していきたいと思います。</p>

<p>はっきり言って現時点で冒頭に紹介した書籍より、xv6のソースコードを読み解くほうが、敷居が低いかどうかは テキストもソースコードも中身を読んでないので不明ですが、</p>

<ol>
<li>約100ページのテキストなので、わからなくてもとりあえずは最後まで読み終える</li>
<li>ANSI Cで書かれているので、C言語にそこまで慣れていなくても多少は読みやすい</li>
</ol>


<p>と思って選びました。これが読み終えることができたら、冒頭の本をもう一度読んでみようと思います。</p>

<p>とりあえずこの記事は、「これからやります！」って意気込みと参考リンクだけです。 英語の翻訳もC言語も全然できないので、ミスがあればご指摘いただけたらとても嬉しいです。</p>

<h3>参考リンク</h3>

<ol>
<li><a href="http://minnie.tuhs.org/cgi-bin/utree.pl?file=V6">Unix V6 ソースコード</a></li>
<li><a href="http://man.cat-v.org/unix-6th/">Unix v6 Manuals</a></li>
<li><a href="http://pdos.csail.mit.edu/6.828/2012/">6.828 Operationg System Engineering(MIT講義の記録？)</a></li>
<li><a href="http://pdos.csail.mit.edu/6.828/2012/xv6.html">xv6 </a></li>
<li><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=0CCoQFjAA&amp;url=http%3A%2F%2Fpdos.csail.mit.edu%2F6.828%2F2012%2Fxv6%2Fbook-rev7.pdf&amp;ei=l2ZuUvKHKsSnkQWqhIDIBA&amp;usg=AFQjCNE5EbxcMjmRRM-zcRZQ3kaXbdkQnw&amp;sig2=Y1hEh9FUVjYffH1Z311mnw&amp;bvm=bv.55123115,d.dGI">xv6 book(教科書っぽいやつ)</a></li>
</ol>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[C#のLINQでJSONを編集してみる]]></title>
    <link href="http://KentaKomai.github.io/blog/2013/10/17/wordpress70/"/>
    
    <updated>2013-10-17T00:00:00+09:00</updated>
    <id>http://KentaKomai.github.io/blog/2013/10/17/wordpress70</id>
    
    <content type="html"><![CDATA[<p>最近学校の制作でちょっとマイブームのC#</p>

<p>今回はWebからjsonを取得して、それをLINQを使って参照したり編集したり、してみます。</p>

<h3>LINQとは</h3>

<ul>
<li><a href="http://msdn.microsoft.com/ja-jp/library/vstudio/bb397933.aspx">LINQの概要 -MSDN-</a></li>
<li><p><a href="http://ufcpp.net/study/csharp/sp3_linq.html">LINQとは -未確認飛行物体 c-</a></p></li>
<li><p>C#3.0から追加</p></li>
<li>RDBやXMLへの操作をプログラミング言語の構文でサポート（ちょっと言い方間違ってるかも）</li>
<li>select from whereなど、SQL文のような書き方ができる。</li>
</ul>


<p>そんな感じ。わざわざ今更ブログに取り上げるような新機能ではないかもしれませんが、 僕は初めて利用したのでメモしておきます。</p>

<h3>JSONをC#で扱う</h3>

<ul>
<li><a href="http://json.codeplex.com/">JSON.NET codeplex</a></li>
<li><a href="http://james.newtonking.com/json">JSON.NET 公式？？</a></li>
<li><a href="http://www.nuget.org/packages/newtonsoft.json/">JSON.NET NuGet install</a></li>
</ul>


<p>多分様々な方法があると思いますが、今回はぐぐって一番最初に出てきたJSON.NETという外部ライブラリを 利用します。</p>

<p>公式ホームページからダウンロードして、参照追加しても良し、NuGet（.NETのライブラリマネージャ、rubyでいうgemとbundleみたいな） でインストールしてもよしです。</p>

<h3>なにをするか</h3>

<ol>
<li><a href="http://express.heartrails.com/api.html">HeartRails Express</a>で無料公開されているAPIから山手線の情報を取得</li>
<li>JSON.NETを利用して取得した文字列をjsonとしてパースし、オブジェクトに代入</li>
<li>オブジェクトに対してLINQを使って、絞り込んだり、追加したりする</li>
</ol>


<p>これだけです。環境は</p>

<ul>
<li>C#5.0</li>
<li>JSON.NET 4.5</li>
</ul>


<h3>第一段階　APIにHTTP.GETリクエストを送ってレスポンスを取得する</h3>

<ul>
<li>using System.NET;</li>
<li>using System.IO;</li>
</ul>


<p>が必要です。</p>

<pre>String url = "http://express.heartrails.com/api/json?method=getStations&#038;line=JR%E5%B1%B1%E6%89%8B%E7%B7%9A";
WebRequest request = WebRequest.Create(url);
Stream response_stream = request.GetResponse().GetResponseStream();
StreamReader reader = new StreamReader(response_stream);
Console.WriteLine(reader.ReadToEnd());
</pre>


<p>これで標準出力に取得したjsonがString型として出力されています。 もっと簡単な方法ないかな・・・</p>

<h3>第二段階　取得した結果をjsonとしてパースする</h3>

<p>JSON.NETのインストールが済んだうえで</p>

<ul>
<li>using Newtonsoft.Json;</li>
<li>using Newtonsoft.Json.Linq;</li>
</ul>


<p>が必要です。</p>

<pre>var obj_from_json = JObject.Parse(reader.ReadToEnd());
</pre>


<p>プログラム自体は１行だけ。文字列をjsonとしてパースしてオブジェクトにして返してくれます。</p>

<h3>第三段階　オブジェクトに対してLINQを利用してなんかする</h3>

<p>最後はLINQを使っていきます。リファレンスには色々書いてあって、多機能で怖い感じも しますが、基本はSQLライクな構文。</p>

<p>今回は取得したjsonの中から、駅名に『町』の文字が含まれる駅データだけを抽出してみます。</p>

<pre>var search_result = from  foo in obj_from_json["response"]["station"] where ((String)foo["name"]).Contains("町") select foo
</pre>


<p>selectやfromなど、SQLを知っていれば、登場する順番は違いますが、 キーワード自体は馴染みのあるものが多いと思います。</p>

<p>個人的に『んー、ほしいなぁ』とおもったのはlikeですね。これはこのサンプルでは String型のContainsメソッドで実現していますが、where句はbool値を返す処理なら なんでも良さそうなので、独自でフィルターを定義することも簡単そうです。</p>

<p>あとは出力してみる</p>

<pre>foreach(var r in search_result){
    Console.WriteLine(r["name"]);
}
</pre>


<p>連想配列になっているので、あとは簡単。御徒町、有楽町、浜松町、田町 が出力されてると思います。</p>

<h3>サンプル全景</h3>

<pre>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Net;
using System.Web;
using System.IO;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace LINQとか使ってみる
{
    class Program
    {
        static void Main(string[] args)
        {
            String url = "http://express.heartrails.com/api/json?method=getStations&#038;line=JR%E5%B1%B1%E6%89%8B%E7%B7%9A";
            WebRequest request = WebRequest.Create(url);
            Stream response_stream = request.GetResponse().GetResponseStream();

            if (!response_stream.Equals(null)) {
                StreamReader reader = new StreamReader(response_stream);
                String str = reader.ReadToEnd();
                var obj_from_json = JObject.Parse(str);
                var search_result = from  foo in obj_from_json["response"]["station"] where ((String)foo["name"]).Contains("町") select foo;

                foreach(var r in search_result){
                    Console.WriteLine(r["name"]);
                }

                Console.ReadLine();
            }
        }
    }
}
</pre>


<p>おわりです。</p>

<h3>ついでにdynamic</h3>

<p>※この項は補足です、タイトルには直接関係ありません。型推論のvarを調べてたら見つけたのでメモ</p>

<ul>
<li><a href="http://ja.wikipedia.org/wiki/%E5%8B%95%E7%9A%84%E5%9E%8B%E4%BB%98%E3%81%91">動的型付け -wikipedia-</a></li>
<li><p><a href="http://ufcpp.net/study/csharp/sp4_dynamic.html">dynamic -未確認飛行物体 c-</a></p></li>
<li><p>C#4.0で追加</p></li>
<li>動的型付け変数が利用できる、ってこと。(pythonやphpの変数みたいに、実行時に変数の型が決まる変数)</li>
<li>型推論であるvarキーワード(C#3.0 で追加)とは別</li>
</ul>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[OpenCVの練習で笑い男っぽいやつを作ってみた]]></title>
    <link href="http://KentaKomai.github.io/blog/2013/10/11/wordpress69/"/>
    
    <updated>2013-10-11T00:00:00+09:00</updated>
    <id>http://KentaKomai.github.io/blog/2013/10/11/wordpress69</id>
    
    <content type="html"><![CDATA[<p>学校の制作でOpenCVを利用する必要があったので 誰でも思いつきそうな、笑い男のまね事が出来るものを作ってみました。</p>

<p>OpenCVはおろか、画像処理のいろはも知らない状態だったので、 ぐぐってぐぐって、様々な方のソースコードを参考にしたり、つぎはぎしたりで、 僕が書いたというよりは、ほとんどパッチワーク状態です（笑）</p>

<p>ですので、技術的な解説がほしい、という方は 期待に添えないと思います。あくまでネタとして こういうのやりたかった！！って人の手間が少しでもなくなれば、程度の内容です。</p>

<p>それでもとりあえず動いて嬉しかった。 windowsのフォームアプリの勉強にもなったし、結構満足しました。</p>

<h3>動作の概要</h3>

<ol>
<li>アプリケーションが起動する</li>
<li>USBカメラから一枚画像を取得</li>
<li>取得した一枚画像に顔と認識される領域が存在するかチェック</li>
<li>顔と認識された領域に、１ピクセルずつ笑い男の画像を上書き</li>
<li>windowに出力</li>
<li>2-5の繰り返し</li>
</ol>


<p>これだけです。笑い男の画像を差し替えれば ネタとしては汎用性が非常に高いプログラムだと思います（笑）</p>

<h3>僕の動作環境</h3>

<ul>
<li>OpenCV 2.4.5</li>
<li>OpenCVSharp (OpenCV2.4.5用)</li>
<li>.NET framework 4.0</li>
<li>USBカメラ 1つ(僕はMacbookProのディスプレイに最初からついてるやつ)</li>
<li>ネットから拾った適当な笑い男のpng画像</li>
</ul>


<h3>実行したときの画像</h3>

<p><a href="http://i2.wp.com/komaken.me/blog/wp-content/uploads/2013/10/photo.jpeg" rel="image_group"><img src="http://i2.wp.com/komaken.me/blog/wp-content/uploads/2013/10/photo.jpeg?fit=639%2C480" alt="photo" class="alignnone size-full wp-image-900" data-recalc-dims="1" /></a></p>

<p>複数人でも一応認識するけど精度は微妙 横顔とかだと認識しない。</p>

<p>ソースコード内でインポートしているXMLファイルをいじったり増やしたり しないとダメかもしれません。</p>

<h3>課題</h3>

<p>png画像だから簡単に透過できるのかなー、と思いきや、なぜかうまく動作しなかったのと、 背景真っ黒にして、黒(#000000)を描画しないように変更したら、 すげー簡単だったので、妥協しました（笑）</p>

<p>複雑な画像だと、こうはいかないので注意です。</p>

<p>あと、攻殻機動隊に登場する笑い男は画像回転してた気がする（文字のところだけ） それ作るには多分、画像から作りなおさないとだめかも。</p>

<h3>ソースコード（笑</h3>

<pre>using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using OpenCvSharp;

namespace facematch_sample
{
    static class Program
    {
        static IplImage FaceDe(IplImage srcImg)
        {
            CvColor[] colors = new CvColor[]{
                new CvColor(0,0,255),
                new CvColor(0,128,255),
                new CvColor(0,255,255),
                new CvColor(0,255,0),
                new CvColor(255,128,0),
                new CvColor(255,255,0),
                new CvColor(255,0,0),
                new CvColor(255,0,255),
            };
            const double Scale = 1.04;
            const double ScaleFactor = 1.139;
            const int MinNeighbors = 2;
            //CvArr waraiotoko = Cv.LoadImage("j");
            IplImage warai = Cv.LoadImage("画像のパスをここに");

            using (IplImage smallImg = new IplImage(new CvSize(Cv.Round(srcImg.Width / Scale), Cv.Round(srcImg.Height / Scale)), BitDepth.U8, 1))
            {
                using (IplImage gray = new IplImage(srcImg.Size, BitDepth.U8, 1))
                {
                    Cv.CvtColor(srcImg, gray, ColorConversion.BgrToGray);
                    Cv.Resize(gray, smallImg, Interpolation.Linear);
                    Cv.EqualizeHist(smallImg, smallImg);
                }

                using (CvHaarClassifierCascade cascade = CvHaarClassifierCascade.FromFile("顔認証用のXMLファイルのパスをここに"))
                using (CvMemStorage storage = new CvMemStorage())
                {
                    storage.Clear();

                    // 顔の検出
                    CvSeq&lt;cvavgcomp> faces = Cv.HaarDetectObjects(smallImg, cascade, storage, ScaleFactor, MinNeighbors, 0, new CvSize(30, 30));

                    for (int d = 0; d &lt; faces.Total; d++)
                    {
                        CvRect r = faces[d].Value.Rect;
                        CvSize size = new CvSize(r.Width + 30, r.Height + 30);
                        using (IplImage img_laugh_resized = new IplImage(size, warai.Depth, warai.NChannels))
                        {
                            Cv.Resize(warai, img_laugh_resized, Interpolation.NearestNeighbor);

                            int i_max = (((r.X + img_laugh_resized.Width) > srcImg.Width) ? srcImg.Width - r.X : img_laugh_resized.Width);
                            int j_max = (((r.Y + img_laugh_resized.Height) > srcImg.Height) ? srcImg.Height - r.Y : img_laugh_resized.Height);

                            for (int j = 0; j &lt; img_laugh_resized.Width; ++j)
                            {
                                for (int i = 0; i &lt; img_laugh_resized.Height; ++i)
                                {
                                    CvColor color = img_laugh_resized[i, j];
                                    if (img_laugh_resized[i, j].Val1 != 0) srcImg[r.Y + i, r.X + j] = color;//img_laugh_resized[i, j];
                                }
                            }
                        }
                    }
                    return srcImg;
                }
            }
        }

        [STAThread]
        static void Main()
        {
            using (CvCapture cap = CvCapture.FromCamera(0)) // device type + camera index
            using (CvWindow w = new CvWindow("sample"))
            {
                cap.Fps = 60;
                while (CvWindow.WaitKey(5) &lt; 0)
                {
                    IplImage img = new IplImage();
                    img = cap.QueryFrame();
                    w.Image = FaceDe(img);
                }
            }
        }
    }
}
</pre>


<p>上記にあるとおり、ほとんどつぎはぎです。後述の参考リンクを 見たほうが勉強になると思います。</p>

<h3>参考リンク</h3>

<ul>
<li><a href="http://moyashiki.hateblo.jp/entry/20101105/1288944541">OpenCVSharpを使ってカメラから顔認識モザイク (大部分がこちらの方のコードの流用です。)</a></li>
<li><a href="http://ledmyway.seesaa.net/article/181382754.html">笑い男パーツ</a></li>
<li><a href="http://vad.seesaa.net/article/213952129.html">似てるようなのたくさん</a></li>
<li><a href="http://opencv.org/">OpenCV公式</a></li>
<li><a href="http://code.google.com/p/opencvsharp/">OpenCvSharp公式</a></li>
<li><a href="http://schima.hatenablog.com/entries/2009/06/16">OpenCvSharp 開発者の方のブログ</a></li>
</ul>


<h3>最後に</h3>

<p>秋葉原電気街で、どこかのPCパーツ屋さんが、同じような サンプルをデモで動かしていて、自分の顔が海物語のマリンちゃんに なってたなー、っていうのをどうでもいいけど思い出しました。 </cvavgcomp></pre></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Google Chrome Developer Toolsの見た目を変える。]]></title>
    <link href="http://KentaKomai.github.io/blog/2013/10/10/wordpress68/"/>
    
    <updated>2013-10-10T00:00:00+09:00</updated>
    <id>http://KentaKomai.github.io/blog/2013/10/10/wordpress68</id>
    
    <content type="html"><![CDATA[<p>今更だけどタイトルとおりです。</p>

<p>MacでもWindowsxでもLinuxでもできます。</p>

<p>僕もそうですが、Firefox + firebugから移行した開発者の方も多いんじゃないかと 思います。</p>

<p>デフォルトだとこんな感じ</p>

<p><a href="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/10/Screen-Shot-2013-10-10-at-15.48.43.png" rel="image_group"><img src="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/10/Screen-Shot-2013-10-10-at-15.48.43.png?resize=955%2C892" alt="Screen Shot 2013-10-10 at 15.48.43" class="alignnone size-large wp-image-896" data-recalc-dims="1" /></a></p>

<p>いじくるとこんな感じ</p>

<p><a href="http://i0.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/10/Screen-Shot-2013-10-10-at-16.03.06.png" rel="image_group"><img src="http://i0.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/10/Screen-Shot-2013-10-10-at-16.03.06.png?resize=937%2C1024" alt="Screen Shot 2013-10-10 at 16.03.06" class="alignnone size-large wp-image-897" data-recalc-dims="1" /></a></p>

<p>変更は簡単です。</p>

<p>Chrome Developer Toolsの見た目もスタイルシートで定義が可能です。 それぞれの環境で以下のパスが対象ファイルになります。 おそらくデフォルトでは中身はからっぽ。</p>

<ul>
<li>windows: C:/Users/YourUsername/AppData/Local/Google/Chrome/User Data/Default/User StyleSheets/Custom.css</li>
<li>Mac: ~/Library/Application Support/Google/Chrome/Default/User StyleSheets/Custom.css</li>
<li>ubuntu: ~/.config/chromium/Default/User StyleSheets/Custom.css</li>
</ul>


<p>※ちなみに僕はchromium,ironを利用しているので、そういった方は パスの&#8221;Google/Chrome&#8221;の部分は&#8221;chromium&#8221;を置換えれば同じようにスタイルの変更ができます。</p>

<p>Githubにはいろんな人が作ったテーマが公開されています。 これらを使えば簡単にかっこよくできます。</p>

<p><a href="https://github.com/search?p=2&amp;q=Chrome+developer+tools+Custom.css+extension%3Acss&amp;ref=searchresults&amp;type=Code">Github search(関係ないファイルもいっぱい検索ひっかっかってますが・・・)</a></p>

<p>Chrome Develper Toolsを多用するかたは是非。</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[UPXによるパックとアンパックとか]]></title>
    <link href="http://KentaKomai.github.io/blog/2013/10/02/wordpress67/"/>
    
    <updated>2013-10-02T00:00:00+09:00</updated>
    <id>http://KentaKomai.github.io/blog/2013/10/02/wordpress67</id>
    
    <content type="html"><![CDATA[<p>バイナリやリバースエンジニアリングの入門書には 必ずといっていいほど取り上げられているパッカーUPXに関しての 使い方やアンパックの方法なんかをまとめてみます。</p>

<h3>1.参考リンク</h3>

<ul>
<li><a href="http://upx.sourceforge.net/">UPX 公式</a></li>
<li><a href="http://ja.wikipedia.org/wiki/UPX">UPX -wikipedia-</a></li>
<li><a href="http://linux.die.net/man/1/upx">UPX(1) Linux man page</a></li>
</ul>


<h3>2.概要(wikipediaより引用)</h3>

<p>※より詳しい内容はwikipediaを参照してください</p>

<blockquote><p>UPX (ultimate packer for executables)は様々なOSのファイル形式に対応した FLOSSの実行ファイル圧縮ソフトウェアである。</p></blockquote>

<ul>
<li>圧縮にはUCLと呼ばれるデータ圧縮アルゴリズムを用いてる</li>
<li>UCLは解凍用のコードがわずか数百バイトで実装できるようなシンプルな設計となっている。UCLは解凍のための追加のメモリ割り当てを要求しない。このことはUPXで圧縮された実行ファイルが余計なメモリを要求しないことを意味し、明確な優位点となっている。</li>
<li>UPX(2.90 beta以上)では多くのプラットフォームでLZMAが利用可能になっている。</li>
</ul>


<h4>サポートされているフォーマット</h4>

<ul>
<li>ARM/PE</li>
<li>Atari/tos</li>
<li>*BSD/i386</li>
<li>djgpp2/COFF</li>
<li>dos/com</li>
<li>dos/exe</li>
<li>dos/sys</li>
<li>Linux/i386 a.out</li>
<li>i386、x86-64、ARM、PowerPC上のLinux/ELF</li>
<li>i386、x86-64、ARM上のLinux/kernel</li>
<li>Mach-O/ppc32、Mach-O/i386 (Google Goを用いて生成されたものを除く)</li>
<li>rtm32/PE</li>
<li>tmt/adam</li>
<li>PlayStation1/exe</li>
<li>Watcom/le</li>
<li>Win32/PE (.NET Frameworkを用いて作られたファイルを除く)</li>
</ul>


<p>プレステの実行ファイルもかよ！！！</p>

<h4>※補足リンク</h4>

<ul>
<li><a href="http://ja.wikipedia.org/wiki/%E3%83%87%E3%83%BC%E3%82%BF%E5%9C%A7%E7%B8%AE">データ圧縮 -wikipedia-</a></li>
<li><a href="http://ja.wikipedia.org/wiki/LZMA">LZMA -wikipedia-</a></li>
</ul>


<h3>3.実行ファイルをパックしてみる</h3>

<p><a href="http://linux.die.net/man/1/upx">UPX(1) Linux man page</a>より引用</p>

<blockquote><p>Compress: This is the default operation, eg. upx yourfile.exe will compress the file specified on the command line.</p></blockquote>

<p>簡単ですね</p>

<pre>$ upx [filepath]
</pre>


<p>upxコマンド(winならupx.exe)の引数に圧縮したいファイルパスを指定して実行するだけ</p>

<p>サンプルコードはこちら。めっちゃ単純。</p>

<p>&lt;</p>

<p>pre></p>

<h1>include &lt;stdio.h></h1>

<p>int main(int argc, char *argv[]){</p>

<pre><code>int i = 0;
int a = 1;

for(i=0; i&lt;30; i++){
    printf("index:%d\n", i);
}

if(a){
    printf("true");
}else{
    printf("false");
}
</code></pre>

<p>} </pre></p>

<p>これを普通にコンパイルして、ファイルサイズを見てみます。</p>

<p><a href="http://i0.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/10/compile_before_pack.png" rel="image_group"><img src="http://i0.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/10/compile_before_pack.png?resize=639%2C186" alt="compile_before_pack" class="alignnone size-full wp-image-884" data-recalc-dims="1" /></a></p>

<p>約48KBです。 ollydbgでアセンブリコードも見てみます。(実行ファイル全体じゃなくて、 ソースコードに対応する箇所だけ)</p>

<p>ソースコードにそのまんま対応しているのがわかると思います。</p>

<pre>0040138C  /$ 55             PUSH EBP
0040138D  |. 89E5           MOV EBP,ESP
0040138F  |. 83E4 F0        AND ESP,FFFFFFF0
00401392  |. 83EC 20        SUB ESP,20
00401395  |. E8 7A050000    CALL upx_samp.00401914
0040139A  |. C74424 1C 0000>MOV DWORD PTR SS:[ESP+1C],0
004013A2  |. C74424 18 0100>MOV DWORD PTR SS:[ESP+18],1
004013AA  |. C74424 1C 0000>MOV DWORD PTR SS:[ESP+1C],0
004013B2  |. EB 18          JMP SHORT upx_samp.004013CC
004013B4  |> 8B4424 1C      /MOV EAX,DWORD PTR SS:[ESP+1C]           ; |
004013B8  |. 894424 04      |MOV DWORD PTR SS:[ESP+4],EAX            ; |
004013BC  |. C70424 6430400>|MOV DWORD PTR SS:[ESP],upx_samp.0040306>; |ASCII "index:%d"
004013C3  |. E8 84070000    |CALL &lt;JMP.&#038;msvcrt.printf>               ; \printf
004013C8  |. FF4424 1C      |INC DWORD PTR SS:[ESP+1C]
004013CC  |> 837C24 1C 1D    CMP DWORD PTR SS:[ESP+1C],1D            ; |
004013D1  |.^7E E1          \JLE SHORT upx_samp.004013B4             ; |
004013D3  |. 837C24 18 00   CMP DWORD PTR SS:[ESP+18],0              ; |
004013D8  |. 74 0E          JE SHORT upx_samp.004013E8               ; |
004013DA  |. C70424 6E30400>MOV DWORD PTR SS:[ESP],upx_samp.0040306E ; |ASCII "true"
004013E1  |. E8 66070000    CALL &lt;JMP.&#038;msvcrt.printf>                ; \printf
004013E6  |. EB 0C          JMP SHORT upx_samp.004013F4
004013E8  |> C70424 7330400>MOV DWORD PTR SS:[ESP],upx_samp.00403073 ; |ASCII "false"
004013EF  |. E8 58070000    CALL &lt;JMP.&#038;msvcrt.printf>                ; \printf
004013F4  |> C9             LEAVE
004013F5  \. C3             RETN
</pre>


<p>IDAで実行ファイルを解析してみた図がこちら。</p>

<p><a href="http://i0.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/10/before_pack_ida.png" rel="image_group"><img src="http://i0.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/10/before_pack_ida.png?resize=955%2C698" alt="before_pack_ida" class="alignnone size-large wp-image-885" data-recalc-dims="1" /></a></p>

<p>こちらもパッと見でちゃんとソースコードが対応しているのがわかります。 問題なさそうなので、こちらをパックしてみます。</p>

<p><a href="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/10/pack_exe.png" rel="image_group"><img src="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/10/pack_exe.png?resize=644%2C211" alt="pack_exe" class="alignnone size-full wp-image-886" data-recalc-dims="1" /></a></p>

<p>ファイルサイズが48kBから約29kBまで圧縮されました。わお。</p>

<p>まずはollydbgで見てみます、が。 さっきのような関数呼び出しや、文字列が見当たらない・・・・。</p>

<p>IDAで見てみると、パック前とくらべて半端じゃなく複雑になったことが わかると思います。</p>

<p><a href="http://i0.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/10/packed_exe.png" rel="image_group"><img src="http://i0.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/10/packed_exe.png?resize=955%2C706" alt="packed_exe" class="alignnone size-large wp-image-887" data-recalc-dims="1" /></a></p>

<p>UPXはupx.exe自体でアンパックもサポートしている上に、アルゴリズムも 単純で手動アンパックも比較的容易ですが、アセンブリコードやバイナリだけを 見れば、圧縮・そして難読化されていることが確認できると思います。</p>

<h3>4.実行ファイルをアンパックしてみる</h3>

<p><a href="http://linux.die.net/man/1/upx">UPX(1) Linux man page</a>より引用</p>

<blockquote><p>Decompress: All UPX supported file formats can be unpacked using the -d switch, eg. upx -d yourfile.exe will uncompress the file you&rsquo;ve just compressed.</p></blockquote>

<p>こちらも簡単。-dオプションをつけて、UPXでパックされてるファイルの パスを渡すだけ。</p>

<p><a href="http://i1.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/10/unpacke_exe.png" rel="image_group"><img src="http://i1.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/10/unpacke_exe.png?resize=644%2C208" alt="unpacke_exe" class="alignnone size-full wp-image-888" data-recalc-dims="1" /></a></p>

<p>ファイルサイズが元通りになってますね。 スクリーンショット撮り忘れちゃいましたが、バイナリもIDAやollydbgで ちゃんと読めるようになってます。</p>

<h3>5.upx.exeなしで手動アンパックしてみる</h3>

<p>手順としては以下の通りです。詳細を書こうとおもったんだけど 参考にしてた本、何冊かに載ってた通りにしても再現できなかったので、ざっくり手順だけ</p>

<ol>
<li>パックされた実行ファイルをollydbgにアタッチする</li>
<li>PUSHAD命令に対応するPOPAD命令を見つけてそこにブレークポイント仕掛ける</li>
<li>POPAD命令でブレークしたら、そこからステップ実行を進めて、CALL命令見つける。</li>
<li>CALL命令で移動した先で、プログラムを一時停止</li>
<li>ollydump（Method2:Search DLL &amp; API name string in dumped file）でダンプ</li>
</ol>


<p>これだけ。4のCALL命令は僕の環境だといくつかあって、CALL命令のジャンプ先で ollydumpすれば、どれかしら正解で普通に実行できます。</p>

<p>ちゃーんと読めば、ピンポイントでダンプできると思うんですが、環境によって違うので うまく書けない・・・。</p>

<p>説明できることがあれば、改めてまとめたいと思います。</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[たのしいバイナリの歩き方、読みました]]></title>
    <link href="http://KentaKomai.github.io/blog/2013/10/01/wordpress66/"/>
    
    <updated>2013-10-01T00:00:00+09:00</updated>
    <id>http://KentaKomai.github.io/blog/2013/10/01/wordpress66</id>
    
    <content type="html"><![CDATA[<p>とても読みやすく、わかり易かったです。</p>

<p><a href="http://www.amazon.co.jp/%E3%81%9F%E3%81%AE%E3%81%97%E3%81%84%E3%83%90%E3%82%A4%E3%83%8A%E3%83%AA%E3%81%AE%E6%AD%A9%E3%81%8D%E6%96%B9-%E6%84%9B%E7%94%B2-%E5%81%A5%E4%BA%8C/dp/4774159182">たのしいバイナリの歩き方 amazon</a></p>

<p>簡単ではあるけど、Metasploitの使い方も載っているのは珍しいと思います。 （オライリーの実践Metasploitとハッカージャパン以外で、僕は初めて読みました。）</p>

<p>簡単なC言語の構文をアセンブラにして、読み解くところから始まり、 シューティングゲームのチート、バッファオーバーフローの解説、簡易デバッガ自作、 エクスプロイトコード作成やマルウェア解析のためのツール紹介、 最後に各種ソフトウェアのインストール方法と続いています。</p>

<p>僕個人が書き残しておきたい部分だけをピックアップしてまとめておきます。</p>

<h3>0. 僕が開発ではあんまり見ないけど、便利だなーと思ったソースコード</h3>

<ul>
<li>[c++] execve()によるshell起動</li>
<li>[c++] <strong>asm</strong>()によるインラインアセンブラ</li>
<li>[c++] fprintf()で汎用的な出力(標準出力に限定しない)</li>
<li>[python] python -c &#8220;python code&#8221;でワンライナー</li>
</ul>


<h3>1. ASLR(Address Space Layout Randomization)のon/off</h3>

<p><a href="http://itpro.nikkeibp.co.jp/article/Keyword/20070527/272583/">ASLRとは</a></p>

<blockquote><p>メモリー領域に格納するデータのアドレスをランダム化すること。 セキュリティ技術の一つで、Linuxをはじめ、Windows Vistaでも採用されている。 主にバッファ・オーバーフロー攻撃の対策として利用される。</p></blockquote>

<ol>
<li>[Ubuntu] $ sudo echo 0 > /proc/sys/kernel/randomize&#95;va&#95;space</li>
<li>[CentOS] # echo 0 > /proc/sys/kernel/randomize&#95;va&#95;space</li>
</ol>


<h4>補足 Exec-Shildのon/off</h4>

<p><a href="http://itpro.nikkeibp.co.jp/article/Keyword/20070622/275594/">Exec-Shieldとは</a></p>

<blockquote><p>特定のメモリー領域から命令を実行できないようにするLinuxの機能。 不正侵入を行う手段の1つである、バッファ・オーバーフロ－攻撃に対して有効な防御機能である。</p></blockquote>

<ol>
<li>[Ubuntu] $ sudo echo 0 > /proc/sys/kernel/exec-shield</li>
<li>[CentOS] # echo 0 > /proc/sys/kernel/exec-shield</li>
</ol>


<h3>2. UPXによるパックとアンパック</h3>

<p>詳細は別の記事にちゃんとまとめたいと思ってるので、ざっくりと。</p>

<p><a href="http://upx.sourceforge.net/">UPX公式</a></p>

<p><a href="http://ja.wikipedia.org/wiki/UPX">UPX -wikipedia</a></p>

<blockquote><p>UPX (ultimate packer for executables)は様々なOSのファイル形式に対応した FLOSSの実行ファイル圧縮ソフトウェアである。</p></blockquote>

<p>実行ファイルを実行可能なまま圧縮する美味しい技術。 Ultimate Packer for eXecutablesの略。</p>

<p>使い方</p>

<ol>
<li>UPXによる圧縮：upx.exe [ファイルパス]</li>
<li>UPXに圧縮されたファイルの復元：upx.exe -d [ファイルパス]</li>
</ol>


<p>※-dの『d』はdecompressの略なんですね。unpackなんだから-uのほうが わかりやすいのになー、と勘違いしてた。</p>

<h3>3. デバッガに利用されるAPIや構造体</h3>

<p>ここに全部詳細を列挙すると結構な量になるので構造体と関数名だけでも</p>

<ul>
<li>PROCESS&#95;INFORMATION構造体</li>
<li>STARTUPINFO構造体</li>
<li>DEBUG&#95;EVENT構造体</li>
<li>CreateProcess()関数：プロセスの新規作成</li>
<li>Resume&#95;Thread()関数：スレッドを動作させる</li>
<li>WaitForDebugEvent()関数：デバッグ中のプロセスの監視</li>
</ul>


<p>※他にもありますが、とりあえず基本的な骨組みに利用されているのはこちら</p>

<h3>4. コードインジェクションとDLLインジェクション</h3>

<p>どちらも他のプロセス内で任意のコードを実行させる手法</p>

<p>正直、読んでも現状『ふーん・・・すげぇ』程度で僕がちゃんと理解して 実践できるかと言えば全然です・・・。ここは色々勉強してから もう一度読み直したいです。</p>

<ul>
<li>SetWindowsHookEx()関数</li>
<li>CallNextHookEx()関数</li>
<li>UnhookWindowsHookEx()関数</li>
<li>CreateRemoteThread()関数：他プロセス内でスレッドを生成する(LoadLibraryをスレッドとして実行させて強制的にDLLをロードさせる)</li>
<li>AppInit&#95;DLLsレジストリ：OS起動直後から任意のDLLを他のプロセスへロード可能になる</li>
</ul>


<p>ここは後でちゃんともう一回やってまとめます。</p>

<h3>5. APIフック</h3>

<p>プロセス内で任意のコードを実行する手法であることはコードインジェクションと 同じだが、特にAPIに任意の独自処理を追加することを『APIフック』と呼ぶ</p>

<p>APIフックには２つのタイプがある</p>

<ol>
<li>対象APIの先頭数バイトを書き換えるタイプ</li>
<li>IAT(Import Address Table)を書き換えるタイプ</li>
</ol>


<p>本書ではMicrosoftリサーチチームがリリースしている Detoursというライブラリを用いたサンプルが紹介されています。</p>

<hr />

<p>僕が読んで特に勉強になった箇所を覚書しておきました。 難しい手法を、わかりやすく解説してあり、非常に読みやすかったです。</p>

<h5>補足リンク</h5>

<p><a href="http://msdn.microsoft.com/ja-jp/library/aa384264(v=vs.85).aspx">windows 新しい型 msdn</a></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[git flowとgithub flowざっくりまとめ]]></title>
    <link href="http://KentaKomai.github.io/blog/2013/09/09/wordpress65/"/>
    
    <updated>2013-09-09T00:00:00+09:00</updated>
    <id>http://KentaKomai.github.io/blog/2013/09/09/wordpress65</id>
    
    <content type="html"><![CDATA[<p>最近学校のチーム制作で、gitを使うことになったので 前半は復習も兼ねてgitそのものの基礎的なコマンドや参考リンクの紹介</p>

<p>後半はタイトルとおり、注目されているリポジトリモデルである git flowと、それを簡易的に発展させたgithub flowの簡単な内容を 確認したいと思います。</p>

<h2>1.gitの基礎と使い方</h2>

<p><strong>参考リンク</strong><br/>
* <a href="http://ja.wikipedia.org/wiki/Git">wikipedia git</a><br/>
* <a href="http://git-scm.com/book/ja">Pro git 和訳</a><br/>
* <a href="http://sourceforge.jp/magazine/09/03/16/0831212">gitを使いこなすために20のコマンド</a></p>

<p><strong>概要</strong></p>

<ol>
<li>Linuxの開発者リーナス・トーバルズが開発</li>
<li>分散型バージョン管理システム（svnは集中型）</li>
<li>ネットワークにつながっていないときでも、ログの確認、コミットが可能</li>
<li>代表的なweb上のgitホスティングサービスとしてgithub, bitbucket, 国内ならgitbreakなど。</li>
</ol>


<p><strong>超基本的な使い方</strong></p>

<ol>
<li>git clone &#91;gitのアドレス&#93; で既存リポジトリを自分の環境にコピー</li>
<li>ソースコードを編集</li>
<li>git statusで変更を確認</li>
<li>git add &#91;ソースコードのパス&#93; でコミットするファイルを明示する</li>
<li>git commit -m &#8216;コミットコメント&#8217; でaddしたファイルの変更点をローカルリポジトリにコミット</li>
<li>git push &#91;送信先リモートリポジトリ名&#93; &#91;送信先ブランチ名&#93; でリモートリポジトリに変更点を送信</li>
<li>2-6を繰り返す</li>
</ol>


<p>これが最低限必要なコマンド（だと思います） これ以外だと</p>

<ul>
<li>git diff</li>
<li>git log</li>
<li>git reset</li>
<li>git branch</li>
<li>git merge</li>
<li>git checkout</li>
<li>git init</li>
</ul>


<p>とかが慣れてきてから使えれば、まぁいいと思います。</p>

<p>僕の個人的な意見としては、上記の1-7の流れ程度はコマンドラインから行えることが 最低限だけど、それ以外は各種GUIクライアントを利用したほうが、楽だし効率もいいかな と思ってます。GUIで確認できるコミットログや、brunchのツリーなんかは CUIでは体感できないものかな、と思います。</p>

<p>代表的なクライアントにはsmartGitや、sourceTreeなど。 githubも公式でクライアントをリリースしています。</p>

<ul>
<li><a href="http://www.syntevo.com/smartgithg/">smartGit</a></li>
<li><a href="http://www.sourcetreeapp.com/">sourceTree</a></li>
<li><a href="http://mac.github.com/">github for mac</a></li>
<li><a href="http://windows.github.com/">github for windows</a></li>
</ul>


<p>このブログのメインであるgit flowに関しては、このうちsourceTreeのみ アプリケーション内で、git flowに関する機能を補完してくれる 機能を備えています。 （もちろん補完されないだけで、どのクライアントでもCUIでもgit flowは 使えます。）</p>

<h2>2.git-flowとは</h2>

<p><strong>参考リンク</strong></p>

<ul>
<li><a href="http://nvie.com/posts/a-successful-git-branching-model/">A successful Git branch (git flow 原典)</a></li>
<li><a href="http://danielkummer.github.io/git-flow-cheatsheet/index.ja_JP.html">Git flow cheat seat (日本語)</a></li>
<li><a href="http://www.slideshare.net/KatokichiSoft/git-flow-16616440">Git flowの活用事例 (slideshare)</a></li>
</ul>


<p><strong>概要</strong></p>

<p>ちゃんとした内容は原典や参考リンクを読んでいただければと思いますが ざっくりと説明すると</p>

<ul>
<li>Gitにおけるリポジトリのモデル（こんなふうにbrunchを切って運用すれば便利じゃね？みたいな感じ）</li>
<li>Git flowというコマンドを別途インストールするかsourceTreeの機能を利用すると簡単に実現できる（しなくても運用で実現は可能）</li>
<li>Git flowのリポジトリモデルをそのまま用いず、各所でカスタマイズして利用されている(参考リンク参照)</li>
<li>メインのmasterブランチ、developブランチを主軸に、feature,release,hotfixの補助的なbrunch群で構成される</li>
<li>masterブランチは常にリリースできる状態、開発はdevelpブランチから、更にブランチを作成して行う。(それがfeature,release,hotfix)</li>
<li>featureは機能追加のためのブランチ(通常時はこれがメインになるのかな？)</li>
<li>releaseはリリース直前のためのブランチ</li>
<li>hotfixはリリース直後の緊急対応用のブランチ</li>
</ul>


<p>こんな感じ</p>

<p>基本的な流れは</p>

<ol>
<li>developをベースに開発用ブランチを作成して（これがfeatureにあたる）開発者それぞれが開発をスタート</li>
<li>他の人が開発したコードを自分の開発用ブランチにマージ</li>
<li>開発が終われば編集内容をdevelopにマージして、開発者用ブランチを削除</li>
<li>developブランチをremoteブランチにpush</li>
<li>1-4を繰り返して開発を進める</li>
<li>開発が終了したらリリースのための作業を始める(developをベースにreleaseブランチを利用、 軽微なバグフィックス、リリース向けのコードや設定の編集)</li>
<li>releaseの編集を終えたら、developとmasterに内容をマージして、releaseブランチを削除</li>
<li>リリースを行う(masterブランチのデプロイ)</li>
<li>リリース後に、緊急バグが発生したらmasterをベースにhotfixブランチを作成し、対応</li>
<li>対応できたらmasterにマージし、hotfixブランチを削除</li>
<li>1-10を繰り返してバージョン管理を運用する</li>
</ol>


<p>こんな感じです。developをベースに作成したブランチで基本的に作業を行い、完了したらマージしてブランチ削除、が 基本的な流れです。 developやmasterのコードを直接編集してはいけません。あくまでベースになり、マージ対象になるだけ。</p>

<h2>3.github-flowとは</h2>

<p><strong>参考リンク</strong></p>

<ul>
<li><a href="http://scottchacon.com/2011/08/31/github-flow.html">GitHub Flow (原典)</a></li>
<li><a href="https://gist.github.com/Gab-km/3705015">GitHub Flow (Japanese translation)</a></li>
</ul>


<p>github内（サービスではなくてgithub開発チームの内部、という意味）で運用されている git-flowをベースにしたリポジトリモデルです。</p>

<p>githubの中の人であるscott chacon氏はgit flowを『I always answer that I think that it’s great ( (git flowについて聞かれたときに)素晴らしいものであると、いつも答えている)』 としながらも、ふたつの短所をあげています。</p>

<ol>
<li>ほとんどのチームや開発者が実際に必要とするよりも複雑すぎではないか</li>
<li>1の複雑な操作をGUIツールに操作を強制することができず、 CUIで全操作を行う必要がある(現在はsource treeがあるので、一応GUIでも操作できるけど)</li>
</ol>


<p>これをより単純にすることで解決したものが、github flowらしいです。</p>

<p><strong>特徴</strong></p>

<ul>
<li>masterブランチは常にデプロイ可能な状態にしておく</li>
<li>新しい開発などは、masterからブランチを作成して名前をつけ、そこで行う</li>
<li>作成したブランチにローカルでコミットし、サーバー上の同じ名前のブランチにも定期的に作業内容をpushする</li>
<li>フィードバックや助言が欲しい時、ブランチをマージしてもよいと思ったときは、 プルリクエスト を作成する</li>
<li>他の誰かがレビューをして機能にOKを出してくれたら、あなたはコードをmasterへマージすることができる</li>
<li>マージをしてmasterへpushしたら、直ちにデプロイをする</li>
</ul>


<p>これだけですね。developブランチという概念がなくなったこと、プルリクエストというgithubの独自機能 が運用に用いられていることが、git flowとの大きな違いです。</p>

<p>僕が思う、github flowのもうひとつのメリットとして</p>

<p><strong>プレビュー前にmasterへのマージが発生しない</strong></p>

<p>ということです。これならだれでも気軽に、開発を行い、プルリクエストをして、上級者からのレビューを受けることが 可能になります。（そうすることが上級者にも強制される）</p>

<p>レビューやテストが重要視される昨今にマッチしたモデルであると個人的には思います。</p>

<hr />

<p>git flowは各所で賞賛され、利用されているモデルではあるみたいですが、やはり銀の弾丸ではないので、 プロジェクトや企業によって、カスタマイズされている場合も多くあるようです。</p>

<p>ぼくは　git flowを知るまでは、ブランチをモデル化して運用する、ということすら 考えがなかったので、とても勉強になりました。</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[[C言語]コールスタック(スタックフレーム)の仕組みを復習する]]></title>
    <link href="http://KentaKomai.github.io/blog/2013/08/31/wordpress64/"/>
    
    <updated>2013-08-31T00:00:00+09:00</updated>
    <id>http://KentaKomai.github.io/blog/2013/08/31/wordpress64</id>
    
    <content type="html"><![CDATA[<p>何冊か本を読んだんですが、しっくり来ないのと、 すこし間があくとすぐに忘れてしまうので 自分の中で整理します。</p>

<p>コールスタックとは</p>

<p><a href="http://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%BC%E3%83%AB%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF">コールスタック -wikipedia-</a>より引用</p>

<p><a href="http://www.asahi-net.or.jp/~wg5k-ickw/html/online/gdb-5.0/gdb-ja_7.html">スタックの検査 -gdb-</a></p>

<blockquote><p>コールスタック (Call Stack)は、プログラムの実行中にサブルーチンに関する情報を格納するスタックである。 実行中のサブルーチンとは、呼び出されたが処理を完了していないサブルーチンを意味する。 実行スタック (Execution Stack)、制御スタック (Control Stack)、関数スタック (Function Stack)など とも呼ばれる。 また、単に「スタック」と言ったときにコールスタックを指していることが多い。 コールスタックを正しく保つことは多くのソフトウェアが正常動作するのに重要であり、 その内容は高水準言語にとっても同じである。</p></blockquote>

<p>つまり、関数の中で関数が呼ばれたときなんかに、 プログラム自体が、次にどこを実行すればいいかわからなくならないように、 きちんと体系的に整理した仕組みで、現在実用されているのがコールスタック ということで大丈夫でしょうか。</p>

<p>第一段階として、main()関数のみの単純なプログラム</p>

<pre>#include &lt;stdio.h>
int main(int argc, char *argv[]){
    int a = 10;
    int b = 20;
    int c = 30;

    return 0;
}
</pre>


<p>実行すれば</p>

<pre>a=10, b=20, c=30
</pre>


<p>と表示されるだけのシンプルなものです。</p>

<p>MACのアセンブラ長くてめんどくさそうだったのでLinux(ubuntu)で コンパイルしたものを用意しました。</p>

<p><a href="https://github.com/KentaKomai/warehouse/blob/master/callstack/sample1.c">sample1.c</a></p>

<p><a href="https://github.com/KentaKomai/warehouse/blob/master/callstack/lnx_sample1.s">sample1.s</a></p>

<p>変数宣言をするだけのプログラムです。それ以外は何もしません。</p>

<p>それをアセンブラにしたソースが上です。</p>

<pre>.file   "sample1.c"
    .text
    .globl  main
    .type   main, @function
main:
.LFB0:
    .cfi_startproc
    pushl   %ebp
    .cfi_def_cfa_offset 8
    .cfi_offset 5, -8
    movl    %esp, %ebp
    .cfi_def_cfa_register 5
    subl    $16, %esp
    movl    $10, -12(%ebp)
    movl    $20, -8(%ebp)
    movl    $30, -4(%ebp)
    movl    $0, %eax
    leave
    .cfi_restore 5
    .cfi_def_cfa 4, 4
    ret
    .cfi_endproc
.LFE0:
    .size   main, .-main
    .ident  "GCC: (Ubuntu/Linaro 4.6.3-1ubuntu5) 4.6.3"
    .section    .note.GNU-stack,"",@progbits
</pre>


<p>.cfiなんちゃらは無視してOKです。</p>

<p>このmain()関数のスタックフレームは</p>

<pre>subl    $16, %esp
    movl    $10, -12(%ebp)
    movl    $20, -8(%ebp)
    movl    $30, -4(%ebp)
</pre>


<p>これによって確保されているようです。 16byte分espが減らされて、ebpから数えてうえから順番に 値(a=10, b=20, c=30)がそれぞれアドレス内に確保されています。</p>

<p>return 0の直前でブレイクさせた状態の情報</p>

<p><a href="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/Screen-Shot-2013-08-31-at-3.59.48.png" rel="image_group"><img src="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/Screen-Shot-2013-08-31-at-3.59.48.png?resize=955%2C209" alt="Screen Shot 2013-08-31 at 3.59.48" class="alignnone size-large wp-image-837" data-recalc-dims="1" /></a></p>

<p>次は、簡単な関数を作成してmain()から呼び出してみます。</p>

<pre>#include &lt;stdio.h>
int add(a, b, c){
    int ret = a + b + c;
    return ret;
}

int main(int argc, char *argv[]){
    int a = 10;
    int b = 20;
    int c = 30;
    int d = add(a,b,c);

    printf("a+b+c=%d\n", d);

    return 0;
}
</pre>


<p>アセンブラにしたものがこちら</p>

<pre>.file   "sample2.c"
    .text
    .globl  add
    .type   add, @function
add:
.LFB0:
    .cfi_startproc
    pushl   %ebp
    .cfi_def_cfa_offset 8
    .cfi_offset 5, -8
    movl    %esp, %ebp
    .cfi_def_cfa_register 5
    subl    $16, %esp
    movl    12(%ebp), %eax
    movl    8(%ebp), %edx
    addl    %edx, %eax
    addl    16(%ebp), %eax
    movl    %eax, -4(%ebp)
    movl    -4(%ebp), %eax
    leave
    .cfi_restore 5
    .cfi_def_cfa 4, 4
    ret
    .cfi_endproc
.LFE0:
    .size   add, .-add
    .section    .rodata
.LC0:
    .string "a+b+c=%d\n"
    .text
    .globl  main
    .type   main, @function
main:
.LFB1:
    .cfi_startproc
    pushl   %ebp
    .cfi_def_cfa_offset 8
    .cfi_offset 5, -8
    movl    %esp, %ebp
    .cfi_def_cfa_register 5
    andl    $-16, %esp
    subl    $32, %esp
    movl    $10, 16(%esp) ;main()変数a
    movl    $20, 20(%esp) ;main()変数b
    movl    $30, 24(%esp) ;main()変数c
    movl    24(%esp), %eax
    movl    %eax, 8(%esp)  ;add()仮引数c
    movl    20(%esp), %eax 
    movl    %eax, 4(%esp)  ;add()仮引数b
    movl    16(%esp), %eax
    movl    %eax, (%esp)   ;add()仮引数a
    call    add 
    movl    %eax, 28(%esp)
    movl    $.LC0, %eax
    movl    28(%esp), %edx
    movl    %edx, 4(%esp)
    movl    %eax, (%esp)
    call    printf
    movl    $0, %eax
    leave
    .cfi_restore 5
    .cfi_def_cfa 4, 4
    ret
    .cfi_endproc
.LFE1:
    .size   main, .-main
    .ident  "GCC: (Ubuntu/Linaro 4.6.3-1ubuntu5) 4.6.3"
    .section    .note.GNU-stack,"",@progbits
</pre>


<p>main()とadd()に対応したアセンブラのコードがそれぞれありますね。</p>

<pre>movl    24(%esp), %eax
    movl    %eax, 8(%esp)  ;add()仮引数c
    movl    20(%esp), %eax 
    movl    %eax, 4(%esp)  ;add()仮引数b
    movl    16(%esp), %eax
    movl    %eax, (%esp)   ;add()仮引数a
    call    add 
</pre>


<p>ここがadd()呼び出しの箇所。 引数は後ろからスタックに入れているのがわかります。</p>

<p>この段階では、ソースを見る限りでは</p>

<pre>10  ;esp     add()の仮引数a
20  ;esp + 4 add()の仮引数b
30  ;esp + 8 add()の仮引数c

10  ;esp + 16 main()のa
20  ;esp + 20 main()のb
30  ;esp + 24 main()のc

</pre>


<p>となっています。これがadd()関数呼び出し前の状態(この状態が重要です。)</p>

<p>callでは、関数を呼び出すのと同時に、呼び出された関数が終了した後に、 どこから処理を再開するべきかのアドレス（リターンアドレス）をスタックにプッシュします。 それに伴い、$espも-4されます。</p>

<p>つまりcallされたときのスタックの状態は</p>

<pre>リターンアドレス ;esp
10  ;esp + 4 add()の仮引数a
20  ;esp + 8 add()の仮引数b
30  ;esp + 12 add()の仮引数c

10  ;esp + 20
20  ;esp + 24
30  ;esp + 28

</pre>


<p>となっています。 add関数に入ると、スタックフレームが構築され、関数の処理が実行できるようになります。</p>

<pre>add:
.LFB0:
    .cfi_startproc
    pushl   %ebp            ;準備
    .cfi_def_cfa_offset 8
    .cfi_offset 5, -8
    movl    %esp, %ebp      ;準備
    .cfi_def_cfa_register 5
    subl    $16, %esp       ;準備
    movl    12(%ebp), %eax
    movl    8(%ebp), %edx
    addl    %edx, %eax
    addl    16(%ebp), %eax
    movl    %eax, -4(%ebp)
    movl    -4(%ebp), %eax
    leave
    .cfi_restore 5
    .cfi_def_cfa 4, 4
    ret
    .cfi_endproc
.LFE0:
</pre>


<p>最初の数行で実行の準備が行われます。（ラベルは無視してOK）</p>

<p>まずはpush %ebpでebpの値をスタックにプッシュします。</p>

<pre>add()呼び出し時のebp ; esp
リターンアドレス ;esp + 4
10  ;esp + 8 add()の仮引数a
20  ;esp + 12 add()の仮引数b
30  ;esp + 16 add()の仮引数c

10  ;esp + 24
20  ;esp + 28
30  ;esp + 32

</pre>


<p>とスタックの状態が変更されます。</p>

<p>その後、movl $esp $ebpでespの値をebpに代入します。</p>

<pre>add()呼び出し時のebp ; esp = ebp
リターンアドレス ;esp + 4
10  ;esp + 8 add()の仮引数a
20  ;esp + 12 add()の仮引数b
30  ;esp + 16 add()の仮引数c

10  ;esp + 24
20  ;esp + 28
30  ;esp + 32

</pre>


<p>espとebpの値が同じになりました。 最後にsubl $16 %espで、add()関数のためのスタックフレームを16byte確保します。</p>

<pre>なにが入ってるかは現段階で不明 ; esp (ebp-16)
.
.
.
add()呼び出し時のebp ; ebp
リターンアドレス ;ebp + 4
10  ;ebp + 8 add()の仮引数a
20  ;ebp + 12 add()の仮引数b
30  ;ebp + 16 add()の仮引数c

10  ;ebp + 24
20  ;ebp + 28
30  ;ebp + 32

</pre>


<p>これで準備OKです。関数内の処理を追っていきます。</p>

<pre>movl    12(%ebp), %eax
    movl    8(%ebp), %edx
    addl    %edx, %eax
    addl    16(%ebp), %eax
    movl    %eax, -4(%ebp)
    movl    -4(%ebp), %eax
    leave
    .cfi_restore 5
    .cfi_def_cfa 4, 4
    ret
    .cfi_endproc
</pre>


<p>ebp+12(つまり引数のb)をeaxに格納し、次にebp+8(つまり引数のa)をedxに格納します</p>

<p>addl $edx, $eaxで二つを足したものを$eaxへ代入。</p>

<p>次のaddl16(%ebp), %eaxで、引数のcと二つを足したものを、更にたして$eaxに代入 (a+b+cを実現しています)</p>

<p>そのあとにebp-4の場所に$eax(a+b+cの答え)を格納してから、ebp-4の値をeaxに格納しています。 （一見無駄な処理ですが、関数のreturnはeaxに格納する決まりなので、そのための慣例的なもの）</p>

<p>この段階のスタックの状態は</p>

<pre>なにが入ってるかは現段階で不明 ; esp (ebp-16)
.
.
60(a+b+cの答え) ; ebp-4
add()呼び出し時のebp ; ebp
リターンアドレス ;ebp + 4
10  ;ebp + 8 add()の仮引数a
20  ;ebp + 12 add()の仮引数b
30  ;ebp + 16 add()の仮引数c

10  ;ebp + 24
20  ;ebp + 28
30  ;ebp + 32

</pre>


<p>最後にleaveとretの処理です。</p>

<p>leaveはスタックフレームの破棄に使われる命令です。内部的にはmov %ebp, %espを 行い、その後、pop %ebpが実行されるのと同義です。</p>

<p>つまり、</p>

<pre>なにが入ってるかは現段階で不明 ; 破棄
. 
.
60(a+b+cの答え) ; 破棄
add()呼び出し時のebp ; ebp = esp
リターンアドレス ;ebp + 4
10  ;ebp + 8 add()の仮引数a
20  ;ebp + 12 add()の仮引数b
30  ;ebp + 16 add()の仮引数c

10  ;ebp + 24
20  ;ebp + 28
30  ;ebp + 32
</pre>


<p>この状態にmov $ebp, $espでしてから、pop %ebpします。つまり、add()呼び出し時のebpを 再びebpに戻します。popされたことによって、espは+4ずれ込みます。</p>

<p>これにより</p>

<pre>リターンアドレス ;esp
10  ;esp + 4 add()の仮引数a
20  ;esp + 8 add()の仮引数b
30  ;esp + 12 add()の仮引数c

10  ;esp + 20 main()のa
20  ;esp + 24 main()のb
30  ;esp + 28 main()のc
</pre>


<p>となります。（add()呼び出し時と同じ状態）</p>

<p>最後にretでリターンアドレスに戻ります。pop $eipと同義です。スタックからリターンアドレスを popして、eip(次に実行される命令のアドレスを格納するレジスタ)に代入して、add()関数が 終了します。</p>

<p>スタックの状態は</p>

<pre>10  ;esp add()の仮引数a
20  ;esp + 4 add()の仮引数b
30  ;esp + 8 add()の仮引数c

10  ;esp + 16 main()のa
20  ;esp + 20 main()のb
30  ;esp + 24 main()のc
</pre>


<p>となり、add()呼び出し前と全くおなじになっています。 add()関数から、制御が戻ったmain()関数では</p>

<pre>call    add
    movl    %eax, 28(%esp)
    movl    $.LC0, %eax
    movl    28(%esp), %edx
    movl    %edx, 4(%esp)
    movl    %eax, (%esp)
    call    printf
    movl    $0, %eax
    leave
    .cfi_restore 5
    .cfi_def_cfa 4, 4
    ret
    .cfi_endproc
</pre>


<p>returnされた値が格納されているeaxから値を取り出して、printf()に渡していることがわかります。</p>

<p>printfも、同じ流れでスタックに引数が渡されています。</p>

<p>main()関数の終了時もleaveとretを実行し、同じように終了します。 leaveの前の movl $0, %eaxはreturn 0;を実現しています。</p>

<p>こんな感じです。</p>

<p>参考にしていた本に誤植があり、それに気がつくまでに時間がかかってしまった・・・。 でもちゃんと復習できてよかった。</p>

<hr />

<h5>その他参考リンク</h5>

<p><a href="http://ja.wikibooks.org/wiki/X86%E3%82%A2%E3%82%BB%E3%83%B3%E3%83%96%E3%83%A9/GAS%E3%81%A7%E3%81%AE%E6%96%87%E6%B3%95">X86アセンブラ/GASでの文法</a></p>

<p><a href="http://softwaretechnique.web.fc2.com/OS_Development/Tips/IA32_Instructions/LEAVE.html">LEAVE命令</a></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[2013夏休みの記録]]></title>
    <link href="http://KentaKomai.github.io/blog/2013/08/31/wordpress63/"/>
    
    <updated>2013-08-31T00:00:00+09:00</updated>
    <id>http://KentaKomai.github.io/blog/2013/08/31/wordpress63</id>
    
    <content type="html"><![CDATA[<p>今年の夏休みは、学生最後なのでできるだけ後悔がないよう、予定を詰め込んだ。</p>

<p>家でごろごろしてたら夏休みが終わってた、といういつものパターンは回避できたし、 割りと勉強も遊びも楽しめたと思います。</p>

<p>記録しておきたいので書き残しておきます。</p>

<h2>7.21 終業　帰りにゲーセンでスロット打つ</h2>

<p>この日で学校が終わり、夏休みに入りました。とりあえず予定はなかったので、 帰路へつきました。</p>

<p>時間も早かったので、帰りに地元のゲーセンに入ってガンダムEXVSFBやったり、 スロット打ったりしてました。</p>

<p>僕はスロットに全然詳しくないので、作品が好きというだけでコードギアス 打ってたんですが、一回BIG引いてから、閉店までずーーっと連チャン。</p>

<p><a href="http://i1.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2208.jpg" rel="image_group"><img src="http://i1.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2208.jpg?resize=955%2C716" alt="IMG_2208" class="alignnone size-large wp-image-812" data-recalc-dims="1" /></a></p>

<p>ゲーセンなので利益とかはもちろんないですが、コイン2,000枚くらいになって 嬉しかったですｗしょーもないですがｗ</p>

<h2>7.22 学校のセキュリティ学科でバーベキュー &amp; お台場ダイバーシティ</h2>

<p><a href="http://i0.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2213.jpg" rel="image_group"><img src="http://i0.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2213.jpg?resize=768%2C1024" alt="IMG_2213" class="alignnone size-large wp-image-811" data-recalc-dims="1" /></a></p>

<p>学校が夏休みに入って次の日に、同じ学科のみんなでバーベキュー。 暑かったけど、バカみたいに騒いで食って飲んで、水鉄砲とかちゃっちゃいました。</p>

<p>帰りにダイバーシティ寄って、1/1ガンダム見たり、ガンプラミュージアム見て 最高にテンション上がりました。</p>

<p>ここでガンプラ熱再燃。のちのちなにかしらガンプラを作ろう！と決意。</p>

<p>夜は、友達二人が自宅に泊まりに遊びにきてくれました。 FPSがとても得意な友達で、上手すぎてビビりました。（Call Of Duty Black Ops 2やってた）</p>

<h2>7.23 葛飾区花火大会（大雨で中止）</h2>

<p>今年初めての花火大会、ということで結構楽しみにしてたんですが 突然のゲリラ豪雨で中止・・・</p>

<p>僕は私服でしたが、周りでは浴衣がびっしょびしょになってる人もいてかわいそうだった。 仕方ないので会場近くのラーメン食べて、まったりしました。</p>

<p><a href="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2227.jpg" rel="image_group"><img src="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2227.jpg?resize=955%2C716" alt="IMG_2227" class="alignnone size-large wp-image-813" data-recalc-dims="1" /></a></p>

<h2>7.30 学校の友人で妙義山登山 &amp; 軽井沢温泉</h2>

<p>以前、初めての登山で高尾山に以前登ったんですが、結構サクサクと進んじゃったので、 登山に慣れた友人に『いかつい山登ってみたい！』と言って、連れて行ってもらいました。</p>

<p>正直なめてました。とりあえずぐぐって登山に必要らしいものは用意してたので、 なんとか登ることはできましたが、落ちたら死ぬかと思うような崖が多かったです。</p>

<p><a href="http://i0.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2240.jpg" rel="image_group"><img src="http://i0.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2240.jpg?resize=955%2C716" alt="IMG_2240" class="alignnone size-large wp-image-814" data-recalc-dims="1" /></a></p>

<p>疲れた、というよりは手や足に力がはいらなくなりました。足はガクガクしっぱなしだったｗ 帰りに軽井沢のほうまで車を回して、でかい温泉はいりました。</p>

<h2>7.31 ふなばし市民まつり</h2>

<p>今年初の花火。来場客数と比べて屋台はとてもすくなくて、どこも行列でした。 かなり長い間並んでいたのですが、自分達の番が来る直前で売り切れ。 もうちょっと早く言って欲しかった・・・一緒に行った知人は結構おこってました（笑）</p>

<p>でも花火はすごいキレイだった。 <a href="http://i1.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2258.jpg" rel="image_group"><img src="http://i1.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2258.jpg?resize=768%2C1024" alt="IMG_2258" class="alignnone size-large wp-image-815" data-recalc-dims="1" /></a></p>

<p>写真これしかなかった・・・orz</p>

<h2>8.3-8.7 青森で祖父の三回忌</h2>

<p>キリストの墓と、十和田湖、ねぶた祭り行きました。あとは食べて、飲んで、寝て。 どこに行っても飯がたっくさん出てきて、常に腹いっぱいだった。</p>

<p><a href="http://i0.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2276.jpg" rel="image_group"><img src="http://i0.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2276.jpg?resize=955%2C716" alt="IMG_2276" class="alignnone size-large wp-image-816" data-recalc-dims="1" /></a></p>

<p>行く前の目標だった『カブトムシ見つける』も達成できて満足</p>

<p><a href="http://i1.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2284.jpg" rel="image_group"><img src="http://i1.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2284.jpg?resize=768%2C1024" alt="IMG_2284" class="alignnone size-large wp-image-817" data-recalc-dims="1" /></a></p>

<p><a href="http://i0.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2288.jpg" rel="image_group"><img src="http://i0.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2288.jpg?resize=768%2C1024" alt="IMG_2288" class="alignnone size-large wp-image-818" data-recalc-dims="1" /></a></p>

<p>基本的にみんなめっちゃ早く寝るので、布団に入りながらネットやったり アルゴリズムの本読んだりしてました。</p>

<h2>8.10 モンスターズ・ユニバーシティ見にいく</h2>

<p>本当は等々力渓谷行く予定だったんですが、ニュースで猛暑が報道されていたので、近所の映画館へ。</p>

<p>子供向けだから〜・・・という前評判を聴いていましたが、普通に良かったです。 子供も大人楽しめる。pixerのCG技術は世界一ィィイイイ</p>

<p>サリーとマイクがモンスターズインクに入社してからの話も、 映像化してほしいなー。</p>

<p>あとお昼に食べたお好み焼きがすごい美味しかったｗ</p>

<p><a href="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2318.jpg" rel="image_group"><img src="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2318.jpg?resize=768%2C1024" alt="IMG_2318" class="alignnone size-large wp-image-819" data-recalc-dims="1" /></a></p>

<h2>8.13 ガンプラ制作スタート HG ガンダムAGE-2 dublle bullet</h2>

<p>ダイバーシティでガンプラミュージアム見てたら、久しぶり（中学生ぶり）にやりたくなりました。 キットを探しにいったお店では、あんまり種類なかったんですが、久しぶりだし、安くてかっこいい HG AGE-2 DOUBLE BULLETにしました。</p>

<p><a href="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2322.jpg" rel="image_group"><img src="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2322.jpg?resize=955%2C716" alt="IMG_2322" class="alignnone size-large wp-image-820" data-recalc-dims="1" /></a></p>

<p>最初はいいペースで作ってたんですが、これ以降予定つっこみすぎて 結局完成したのは８月末でした。</p>

<p>夏休みでやたら工具が充実しました・・・(ミニ四駆のときのために買ったものもあるけど)</p>

<ul>
<li>TAMIYA モデラーズナイフ</li>
<li>ガンプラマーカー　黒</li>
<li>ガンプラマーカー　茶</li>
<li>TAMIYA 紙やすり 400 600 800 1000 1200 1500 2000</li>
<li>TAMIYA のちっちゃいトンカチ</li>
<li>TAMIYA タミヤセメント</li>
<li>TAMIYA セミグロスブラックの塗料</li>
<li>つやけしスプレー</li>
</ul>


<p>などなど。工具が揃っちゃえば、あんまりお金かけずに長時間楽しめるいい趣味だと思います。プラモ。</p>

<h2>8.14 MGO(Meta Gear Online)クランのみんなでバーベキュー</h2>

<p>なんだかんだでもう５年くらいの付き合いかな？ ３，４ヶ月に１回くらいは仲のいい面子で集まってます。 今回はメンバーの家の庭でバーベキューやりました。</p>

<p><a href="http://i0.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2326.jpg" rel="image_group"><img src="http://i0.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2326.jpg?resize=768%2C1024" alt="IMG_2326" class="alignnone size-large wp-image-821" data-recalc-dims="1" /></a></p>

<p>その後は、とにかく酒のみながらずっとゲーム。</p>

<p>やってみたかったダークソウルやらせてもらったんですが、センスなさすぎワロタｗ ２体目のボス倒したあたり以降、まったく進めなくなりました・・・ｗ</p>

<p>メンバーのご家族にはいつも優しくしてもらって感謝です。</p>

<h2>8.15 学校の先輩・後輩みんなでバスケ</h2>

<p>ウチの学校は情報処理や、CG、ゲーム開発など、とにかくインドアな学部しかないので、 運動不足は深刻な問題です。</p>

<p>なので、たまに体を動かしたい何人かの人が主催してバスケとかフットサルが開催されます。 知ってる人も知らない人もたくさん参加します。</p>

<p>僕はだいぶ遅くから参加したので、あんまり疲れなかったけど やっぱり体動かすの楽しい。下手くそですけどね。</p>

<p>次の日は始発で出る予定なので、バスケ終了後すぐに帰宅。また誘ってくださーい</p>

<h2>8.16 学校の友人と伊豆ヒゾリ浜でシュノーケリング</h2>

<p>日帰り旅行だったんですが、始発で家を出て、帰りは渋滞のおかげで新宿に着いたのが 午前３時（笑）</p>

<p>でも半端なく楽しかったです。 はじめてシュノーケリングしたんですが、あんなにおもしろいと 思ってなかった・・・。一年中できたらいいのに、って思いました。</p>

<p><a href="http://i1.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2342.jpg" rel="image_group"><img src="http://i1.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2342.jpg?resize=955%2C716" alt="IMG_2342" class="alignnone size-large wp-image-822" data-recalc-dims="1" /></a></p>

<p><a href="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2345.jpg" rel="image_group"><img src="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2345.jpg?resize=955%2C716" alt="IMG_2345" class="alignnone size-large wp-image-823" data-recalc-dims="1" /></a></p>

<p>普通にキレイな魚とか貝とか、ちょっと潜っただけでごろごろしてるんですね。 僕は見れなかったけどウニとか、サザエとかもいたらしい。</p>

<p>またヒゾリ浜行きたいなぁー・・・。 あとダイビングの資格とりたくなった・・・。沖縄とかにもいきてぇ！！</p>

<h2>8.17 鴨川シーワールドへドライブ</h2>

<p>前日、新宿についたのが午前３時だったので、その日は始発まで満喫。 それから始発で自宅に帰り、そこから少ししてレンタカーで出発。</p>

<p>無事帰ってこれたからよかったけど、クッソきつかったｗｗ 運転中もねむかった・・・ｗ</p>

<p>でも眠気関係なくなるくらい楽しかった！やっぱ動物いいなー、って思いました。 大好きなチンアナゴ見れて、すごい幸せになりました。</p>

<p><a href="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2346.jpg" rel="image_group"><img src="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2346.jpg?resize=768%2C1024" alt="IMG_2346" class="alignnone size-large wp-image-829" data-recalc-dims="1" /></a></p>

<p>帰りは近くの浜でたくさん写真を撮ってから、 眠いのを我慢しつつ、perfumeかけて楽しく帰宅しました。</p>

<h2>8.18-8.23 出家合宿 &amp; アルバイト再開</h2>

<p>アルバイト先では、新しいインターン生がたくさん来ていて、自分がインターン 来たのが、もう一年前かー・・・って色々考えるところがありました。 ( 去年の同時期のインターンに参加し、終了後、そのままアルバイトとして働き始めました)</p>

<p>業務自体はいつもどおりでしたが、長い時間入れたので、いつもより 良いコード書けた気がするし、進捗も良かったと思います。 javascriptだけをフルタイム１週間書くのは初めてでした。</p>

<p>家から通うのではなく、知人の家に１週間お世話になりました。 自室から一週間離れると、さすがに違和感ありますねー。</p>

<p>たった一週間だったけど、自宅に帰ったときの『実家かえってきたー』感を 初めて味わうことができたと思う。</p>

<h2>8.24 よかろうもん定例勉強会</h2>

<p>久しぶりの参加。僕はネタナシでしたが・・・ 夏休みの間会ってなかった学校の面子にも久しぶりに会えて嬉しかったです。</p>

<p>iPythonとapp goat、そしてctfの過去問題の一部がとりあげられました。</p>

<p>次回の勉強会は、都合があわず、二ヶ月先。 宿題たっぷり出たので頑張ります。</p>

<p>夕ごはんは地元のワインバーにふらっと行ったんですが、予想以上に美味しかった。 値段もそこそこでまた行きたいなー。特にマリネが最高だった。</p>

<h2>8.25 池袋セキュリティ勉強会#1 / 超久しぶりのバンド練習</h2>

<p>セキュリティ勉強会に関しては前回のブログに書きましたので、そちらで。</p>

<p>勉強会の後、亀戸のリハーサルスタジオへ直行</p>

<p>バンド活動をこの日より再開しました。といってもメンバーは違うし、 月に１回の活動ですが。</p>

<p>練習不足の僕のせいでグダグダしつつも楽しい練習ができたので、これから毎月 頑張ってみようと思います。</p>

<p>次回からはオリジナル曲もやっていくので、機会があれば聴いてほしいです。</p>

<h2>8.27 出校日 ヴァルキリ山(@Wireworks)達とミニ四駆</h2>

<p>新橋のタミヤプラモデルファクトリー行ってきました。ミニ四駆なんて 小学校以来。</p>

<p>値段も手頃で、ついつい色々パーツ買っちゃうのね。</p>

<p>僕はレッツ&amp;ゴー世代なので、烈のミニ四駆買おうと思ってたんですが、 ミニ四駆proの烈のマシン（ロデオソニック）あんまり好みじゃなくて、 しかもいろんな世代が遊べるように、ひと通り各世代の代表的なマシンがproで発売されていたので、 僕はダッシュ１号皇帝（エンペラー）をチョイス。</p>

<p>購入してから、そのまま２階の部屋で作りました。 デカールはタミヤプラモデルファクトリー限定のものを購入して、ぺたぺた貼りました。</p>

<p><a href="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2376.jpg" rel="image_group"><img src="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2376.jpg?resize=955%2C716" alt="IMG_2376" class="alignnone size-large wp-image-825" data-recalc-dims="1" /></a></p>

<p><a href="http://i1.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2381.jpg" rel="image_group"><img src="http://i1.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/IMG_2381.jpg?resize=955%2C716" alt="IMG_2381" class="alignnone size-large wp-image-824" data-recalc-dims="1" /></a></p>

<p>我ながら、そこそこかっこよく出来たと思いますが、ソニックとか、スピンアックスみたいな ボディでタイヤを覆っていて、車高が低いタイプも捨てがたいなぁ、と。</p>

<p>次買うときは、ソニックにしようかな。</p>

<p>あとでぐぐってみたら、ハイパーダッシュpro + 超速ギア + ベアリングで、スピード自体は 簡単に最高速を実現できるらしいが、そこからのコースアウト対策などのチューニングが難しい、と。</p>

<p>プラモと同じく、気軽に低価格で長く楽しめるいい趣味になりそう。</p>

<p>帰宅してからも少しいじったんですが、予想以上にグリスは重要ですね。 音が全然変わった。</p>

<h2>8.28 AGE-2 DOUBLE BULLET完成</h2>

<p>素組は結構前に終わってたんですが、最後に仕上げとかトップコートとか、まだでしたので、 この日に仕上げました。</p>

<p>トップコートを均一に吹くのめちゃくちゃ難しくて、ムラだらけだし、白くなっちゃったところも 多々ありますが、中学校のときに作ってたガンプラよりはクオリティ上げられたと思う。</p>

<p><a href="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/photo.jpeg" rel="image_group"><img src="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/photo.jpeg?resize=480%2C640" alt="photo" class="alignnone size-full wp-image-827" data-recalc-dims="1" /></a></p>

<p>何体か作れば、もっと上手になるかなー。とりあえず買っただけで、まだ未開封のトールギスⅢに、 次は挑戦してみます。</p>

<h2>8.29 CLANNADは人生</h2>

<p>なんとなーく最初から見返しました。最初から全部見直すのは３回目です。 けど、毎度同じところでボロ泣きするｗ</p>

<p>何回見なおしてもやっぱりことみちゃんが一番好き。 アフター、アニメでやってほしかった・・・。</p>

<p>原作やってないけど大好きな作品です。がんばろう、って思いましたｗ</p>

<p>一日中見てたら頭いたくなった。</p>

<hr />

<h2>夏休み中読んだ本</h2>

<p>もっともっと予定には何冊か、読もうと思ってたのですが、結局読めたのは</p>

<ul>
<li>ゲーム理論の基本と考え方がよーくわかる本</li>
<li>Cプログラムの中身がわかる本</li>
<li>最強最速アルゴリズマー養成講座</li>
</ul>


<p>の３冊だけでした・・・この３冊も理解、という意味では、もう何度か見直したい・・・。</p>

<p>空き時間に読もうー、とか思ってると全然読めないですね・・・。もうちょっと積極的に 本を読む時間を作らないと。</p>

<h2>今回の夏休みでできなかったこと</h2>

<ol>
<li>フルマラソン挑戦（参加者の予定合わず）</li>
<li>スライム作成 (なんだかんだで材料を揃えられず)</li>
<li>LPIC Level2対策 (他のことばっかりしてた・・・)</li>
</ol>


<p>この３つは予定してたんですが、全く触れなかった・・・。10月には情報処理技術者試験もあるし・・・。 ぐぬぬ・・・。9月で取り戻さないと・・・。</p>

<hr />

<p>こんな感じです。最初に『遊びも勉強も』と書きましたが、正直勉強は不足してますね・・・。どう見ても・・・。 でも楽しめました、後悔のない夏休みにできました。</p>

<p>写真はガンプラの完成写真以外は全部iPhoneなんで、ちょっとしょぼいですが、総括なのでまぁいっか。 ちゃんとしたカメラで撮った中でお気に入りのものはfacebookにアップロードします。</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[セキュリティ勉強会#1に参加してきました]]></title>
    <link href="http://KentaKomai.github.io/blog/2013/08/27/wordpress62/"/>
    
    <updated>2013-08-27T00:00:00+09:00</updated>
    <id>http://KentaKomai.github.io/blog/2013/08/27/wordpress62</id>
    
    <content type="html"><![CDATA[<p>以下の内容は悪用厳禁です。なにかあっても当ブログ管理人は責任は負えません。 自分の環境で試す場合は自己責任でお願い致します。</p>

<p>また、この記事の内容を用いて、他人に攻撃を行うことは犯罪です。 下記の法律に抵触する可能性がありますので、全PCが自分の管理下である場合のみに限り検証してください。</p>

<pre>不正指令電磁的記録作成等
第百六十八条の二 　正当な理由がないのに、人の電子計算機における実行
の用に供する目的で、次に掲げる電磁的記録その他の記録を作成し、又は
提供した者は、三年以下の懲役又は五十万円以下の罰金に処する。
一 　人が電子計算機を使用するに際してその意図に沿うべき動作をさせず、
又はその意図に反する動作をさせるべき不正な指令を与える電磁的記録
二 　前号に掲げるもののほか、同号の不正な指令を記述した電磁的記録そ
の他の記録
２ 　正当な理由がないのに、前項第一号に掲げる電磁的記録を人の電子
計算機における実行の用に供した者も、同項と同様とする。
３ 　前項の罪の未遂は、罰する。
不正指令電磁的記録取得等
第百六十八条の三 　正当な理由がないのに、前条第一項の目的で、同項各
号に掲げる電磁的記録その他の記録を取得し、又は保管した者は、二年以
下の懲役又は三十万円以下の罰金に処する。
</pre>


<p>また、勉強会の内容は一部省略しております。詳しい使い方などは 公式ドキュメント等を参照していただければと思います。</p>

<hr />

<p>8月の25日に池袋セキュリティ勉強会#1に参加させていただきました。</p>

<p><a href="http://connpass.com/event/3004/">connpass セキュリティ勉強会#1</a></p>

<p>内容はexploitコードの作成や実行を支援するセキュリティツール <a href="http://ja.wikipedia.org/wiki/Metasploit">metasploit</a>の使い方に関してでした。</p>

<p>CTFなどで、数回使ったものの、結局基本のキも知らない状態だったので、 とても参考になりました。復習も兼ねて思い出しながら全体の流れを書いてみます。</p>

<p>勉強会の流れは</p>

<ul>
<li>環境設定 (検証のための古いjreやmetasploit framework本体のインストール)</li>
<li>脆弱性コードの作成と攻撃サーバ立ち上げ</li>
<li>やられOSの乗っ取り(meterpretarの使い方など)</li>
<li>攻撃の自動化</li>
<li>懇親会（僕は私用で参加できませんでした）</li>
</ul>


<p>という感じでした。</p>

<h2>環境設定</h2>

<p>会場はMac半分、windows半分という感じでした。</p>

<p>セットアップ済みの環境が簡単に用意できるペネトレーションテストに 特化したLinuxディストリビューションであるKali linuxのインストールを 仮想環境で準備している方も多かったみたいです。</p>

<p>僕もkali linuxを入れてあったんですが、前日の夜になんとなくMacで動かせたら便利だなー と思ってセットアップを始めたら、なんかいい感じに動いたので勉強会ではMac上で動かしている metasploitを使ってました。</p>

<p>※MacOS Mountain Lionにmetasploit frameworkのインストールは <a href="http://www.phocean.net/2013/05/05/installing-metasploit-on-os-x-mountain-lion.html">こちら</a> を参考にしました。brewを使わずgit cloneで準備しました。 postgresqlのパスワード忘れちゃって結構焦りましたが、それ以外は問題なく進みました。</p>

<p>※ちなみにarmitage(metasploitのGUIみたいなやつ)のインストーラー(.dmg)も公式で 用意されているようなのですが、何故かインストールできず・・・（原因を調べてもいませんが）</p>

<p>kali linuxでもMacOSでも、コマンド $msfconsoleでmetasploit起動です。</p>

<p><a href="http://i1.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/Screen-Shot-2013-08-27-at-0.23.59.png" rel="image_group"><img src="http://i1.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/Screen-Shot-2013-08-27-at-0.23.59.png?resize=955%2C898" alt="Screen Shot 2013-08-27 at 0.23.59" class="alignnone size-full wp-image-796" data-recalc-dims="1" /></a></p>

<p>僕の環境ではversion 4.8です。1159種類のexploit 310種類のペイロードなどなどが 含まれているようです。</p>

<p>起動時に表示されてるAAは複数あってランダムで表示されるようです。</p>

<pre>msf > banner
</pre>


<p>bannerコマンドでAA表示を何度も行えます。オリジナルのbannerを作成して 表示させることもできるらしいです。</p>

<h2>脆弱性コードの作成と攻撃サーバ立ち上げ</h2>

<p>metasploitによるexploit作成の基本的なコマンドなどの紹介</p>

<p><strong>基本的な手順</strong></p>

<ol>
<li>exploitを選択 (msf > use [exploit path])</li>
<li>設定を行う (msf > set &#91;option name&#93; &#91;value&#93;)</li>
<li>payloadを選択 (msf > set PAYLOAD &#91;payload path&#93;)</li>
<li>exploitの実行 (msf > exploit)</li>
</ol>


<p><strong>その他、使ったコマンド</strong></p>

<pre>search \[keyword\]  :moduleの検索
jobs                :現在動作しているジョブの表示
kill [job number]   :ジョブの終了
sessions [option]   :exploitで取得したセッション情報の管理 -lで一覧 -i \[session number\]で接続
</pre>


<h2>やられOSの乗っ取り</h2>

<p>今回の勉強会ではjavaappletのexploitを利用して 攻撃サーバにアクセスしてきたマシンを乗っ取る、という演習を行いました。</p>

<p>自分が立てた攻撃サーバにアクセスがあると、セッションの確率を試みます。</p>

<p><a href="http://i0.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/Screen-Shot-2013-08-27-at-1.37.37.png" rel="image_group"><img src="http://i0.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/Screen-Shot-2013-08-27-at-1.37.37.png?resize=955%2C132" alt="Screen Shot 2013-08-27 at 1.37.37" class="alignnone size-large wp-image-797" data-recalc-dims="1" /></a></p>

<p>セッションが確立されると、後はmeterpretar経由で攻撃者が自由に走査すること ができます。</p>

<p><a href="http://i0.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/Screen-Shot-2013-08-27-at-1.38.02.png" rel="image_group"><img src="http://i0.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/Screen-Shot-2013-08-27-at-1.38.02.png?resize=955%2C176" alt="Screen Shot 2013-08-27 at 1.38.02" class="alignnone size-large wp-image-798" data-recalc-dims="1" /></a></p>

<p>一度乗っ取りが成功すると、metasploit consoleからmeterpretar経由で キーロガーを起動させて、キー入力を見たり、スクリーンショットを取ったり</p>

<p>lsコマンドやsysinfoで対象のシステムの中身を除く <a href="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/Screen-Shot-2013-08-27-at-1.47.19.png" rel="image_group"><img src="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/Screen-Shot-2013-08-27-at-1.47.19.png?resize=955%2C346" alt="Screen Shot 2013-08-27 at 1.47.19" class="alignnone size-large wp-image-799" data-recalc-dims="1" /></a></p>

<p>プロセスの乗り換え・偽装 <a href="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/Screen-Shot-2013-08-27-at-1.46.45.png" rel="image_group"><img src="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/Screen-Shot-2013-08-27-at-1.46.45.png?resize=955%2C174" alt="Screen Shot 2013-08-27 at 1.46.45" class="alignnone size-large wp-image-800" data-recalc-dims="1" /></a></p>

<p>rubyコンソールの起動 <a href="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/Screen-Shot-2013-08-27-at-1.47.50.png" rel="image_group"><img src="http://i2.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/Screen-Shot-2013-08-27-at-1.47.50.png?resize=800%2C274" alt="Screen Shot 2013-08-27 at 1.47.50" class="alignnone size-full wp-image-801" data-recalc-dims="1" /></a></p>

<p>などが行えることを確認しました。ちなみに、meterpretarによる操作だけでなく、シェルの起動も可能です。</p>

<p>※ターミナルを透過背景にしているため、関係ないものが多々写っていますが気にしないでください。</p>

<h2>攻撃の自動化</h2>

<p>最後に、先ほど実践した手順を自動化してみよう、という内容でした。</p>

<ul>
<li>リソースファイルの作成 (.msfファイル)</li>
</ul>


<p>こちらは簡単です。先ほどの手順を.msfファイルにあらかじめ記入しておき msfconsole起動時に読み込むだけです。</p>

<pre>use [exploit path]
set \[option\] \[value\]
run
</pre>




<pre>$ msfconsole -r auto\_exploit.msf
</pre>


<p>これだけです。</p>

<ul>
<li>exploit選択の自動化(要DBセットアップ、db&#95;autopwnモジュール)</li>
</ul>


<p>※現在ではautopwnの開発・メンテナンスが終了しているため、利用が推奨されていないようです。 あくまで検証用として、お考えください。</p>

<ol>
<li>ネットからdb&#95;autopwnのプラグインをダウンロード</li>
<li>metasploit frameworkのpluginフォルダに移動</li>
<li>msf > db&#95;connectを行う(database.ymlにDBログイン設定の記入をしてから)</li>
<li>msf > load db&#95;autopwn (pluginのロード)</li>
<li>msf > db&#95;nmap -O &#91;target IP address&#93; (targetをnmpaでスキャン 要nmap)</li>
<li>msf > hosts でhostsの情報確認</li>
<li>msf > db&#95;autopwn -p -e -t (exploitの自動選択と実行)</li>
</ol>


<p>※コマンドの使い方がわからないときは msf > help [command] で概要と使い方を調べることができます。</p>

<p>こんな感じでした。</p>

<p>現在はarmitageというmetasploitのGUI版のようなソフトで、同じことが可能です。</p>

<hr />

<p>勉強会の全てではないですが、おおまかにこのような内容でした。 主催の方々、ありがとうございました。</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[[AngularJS]$scopeを超えてデータ(model)をやりとりする[夏休み企画5]]]></title>
    <link href="http://KentaKomai.github.io/blog/2013/08/22/wordpress61/"/>
    
    <updated>2013-08-22T00:00:00+09:00</updated>
    <id>http://KentaKomai.github.io/blog/2013/08/22/wordpress61</id>
    
    <content type="html"><![CDATA[<p>AngularJSでは、コントローラーのネストが可能です。</p>

<p>例えば、よくあるサンプルで</p>

<pre><div id="parentScope" ng-controller="blogCtrl">
  <ul>
    <li ng-repeat="article in articles" ng-controller="articleCtrl">
      
                  <table>
        <!-- 詳細を見るためのview ということにしておきます -->
                        
                            
        
        <tr>
          <td>
            title
          </td>
                                  
          
          <td>
            date
          </td>
                                  
          
          <td>
            description
          </td>
                              
        </tr>
                        
                        
                            
        
        <tr>
          <td>
            
          </td>
                                  
          
          <td>
            
          </td>
                                  
          
          <td>
            
          </td>
                              
        </tr>
                        
                    
      </table>
              
    </li>
        
  </ul>
  
</div>
</pre>


<p>このようにすれば、diaryCtrl内で$scope.articlesを宣言し、 データを配列で格納すれば、li要素が配列の要素数だけ繰り返されます。</p>

<p>ざっくりですが、li要素内のtable要素は、最初に記述されている をクリックすると、詳細が確認できるようになっている、とします。</p>

<p>※イメージが難しければ前回のTodoMVCの解説の記事にあった、実際に 動作させているリンクを確認していただければと思います。ダブルクリックすると todoの内容を編集できるtextboxが表示されますが、あれと同じ要領だと思っていただれば と思います。</p>

<p>通常はこれで問題ないのですが、例えば</p>

<ul>
<li>編集や確認をしたい要素が大量にある</li>
<li>modelのstyle(CSS)を編集するためのformを用意したい</li>
<li>ng-repeatしている要素が大量にある</li>
</ul>


<p>などの理由で、どうにかtableをarticleCtrlの外に出したいときや、 詳細表示用や編集のためのviewをひとつだけにして、 内容だけを切り替えて表示したいとき、なんかがあります。。</p>

<p>※僕の場合は、ng-repeatさせているdiv要素のopacityとz-indexを変更させたかったのですが 、controller内のformやinput要素で編集を行うと、z-indexを変更した瞬間にformごと 全体を囲っているdiv.wrapper後ろにいってしまう、という問題がありました。</p>

<p>なので、こんな感じにしたいんです。</p>

<pre><div id="parentScope" ng-controller="blogCtrl">
  <ul>
    <li ng-repeat="article in articles" ng-controller="articleCtrl">
      
      
              
    </li>
        
  </ul>
      
  
  <table>
    <!-- 詳細を見るためのview 内容は、クリックされたaritlceによって切り替える -->
            
            
    
    <tr>
      <td>
        title
      </td>
                  
      
      <td>
        date
      </td>
                  
      
      <td>
        description
      </td>
              
    </tr>
        
        
            
    
    <tr>
      <td>
        
      </td>
                  
      
      <td>
        
      </td>
                  
      
      <td>
        
      </td>
              
    </tr>
        
        
  </table>
  
</div>
</pre>


<p>こういうときに、クリックされたarticleはarticleCtrl内のscopeに 含まれているので、blogCtrlからアクセスができません。</p>

<p>要するに、クリックされたarticleCtrl内の$scope.articleを、 blogCtrlに渡せれば万事解決です。</p>

<p>結論からいうと、簡単にできます。これだけ</p>

<pre>var parentScope = angular.element($('#parentScope)).scope();
</pre>


<p>angular.element()では、jQueryのlite版(jqLite)のラッパーです。 つまり、jQueryと同様のセレクタを指定できます。</p>

<p>公式リファレンスは<a href="http://docs.angularjs.org/api/angular.element">こちら(angular.element)</a>です</p>

<p>blogCtrlの宣言場所にidを指定しておいたので、それをセレクタで 指定してあげます。</p>

<p>それに対してscope()メソッドを実行することで、対象のscopeが取得できます。 つまり、blogCtrlのスコープが取得できます。</p>

<p>あとは、そのスコープに渡したいデータを渡すだけ。</p>

<p>上記のコードを利用したサンプルを作成してみました。</p>

<p><a href="http://plnkr.co/edit/hHjZEf3AMoJruoDRA2P6?p=preview">sample</a></p>

<p>ネタさえわかってしまえば、特別難しいことはしていません。</p>

<pre>var SampleModule = angular.module('SampleModule', []);

SampleModule.controller('listCtrl', ['$scope', '$http',
  function($scope, $http){
    $scope.users = [
      {id:1, age:20, sex:1, name:'user1'},
      {id:2, age:22, sex:1, name:'user2'},
      {id:3, age:14, sex:2, name:'user3'},
      {id:4, age:29, sex:2, name:'user4'},
      {id:5, age:16, sex:1, name:'user5'},
      {id:6, age:25, sex:2, name:'user6'}
    ];
    $scope.editing = [];  
  
    $scope.editUser = function(user){
      $scope.beforeEdit = angular.extend({},user);
      $scope.editing = user;
    };
    
    $scope.saveEdit = function($event){
      $scope.editing = undefined;
    };
    
    $scope.cancelEdit = function($event){
      //$scope.editing = beforeEdit;
      angular.forEach($scope.users, function(user, key){
        if(user.id == $scope.beforeEdit.id){
          $scope.users[$scope.users.indexOf(user)] = $scope.beforeEdit;
        }
      });
      $scope.editing = undefined; 
    };
  }
]);

SampleModule.controller('userCtrl', ['$scope',
  function($scope){
    
    $scope.editUser = function($event){
      var parentScope = angular.element($('#listScope')).scope();
      parentScope.editUser($scope.user);
    };
    
  }
]);
</pre>


<p>ポイントは</p>

<pre>$scope.beforeEdit = angular.extend({},user);
$scope.editing = user;
</pre>


<p>の箇所です。</p>

<p>angular.extend({}, user)はuserオブジェクトのcloneをしてます。 普通に代入するとcloneではなく、参照がコピーされてしまうので 編集前のuserオブジェクトを保持しておき、編集のキャンセルが されたときに、編集前にオブジェクトを戻すためです。</p>

<p>これで、編集画面のviewを１つだけに、内容は選択されたオブジェクトによって 動的に切り替えています。</p>

<p>しかし、問題としては、本来userCtrl内の$scope.userを、viewの都合で 他のコントローラーに渡して、そこでデータを編集していることです。</p>

<p>これはどうなんだろう・・・・。</p>

<p>これに対する対応策として、僕はmodelの一部をserviceから取得して、 編集・削除などはserviceを介してリクエストを行う、ということを検討しました。 それは機会があれば、おいおい・・・。</p>

<p>ざっくりですが、ここまでです。</p>

<p>とりあえず</p>

<pre>angular.element() //jqLiteを使ってDOMを取得
</pre>


<p>と</p>

<pre>angular.extend() //オブジェクトのcloneを作成
</pre>


<p>この２点を確認できれば、と思います。</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[[algorithm]グラフ理論と幅優先探索＆深さ優先探索の入門の入門(夏休み企画4)]]></title>
    <link href="http://KentaKomai.github.io/blog/2013/08/02/wordpress60/"/>
    
    <updated>2013-08-02T00:00:00+09:00</updated>
    <id>http://KentaKomai.github.io/blog/2013/08/02/wordpress60</id>
    
    <content type="html"><![CDATA[<p>学校の授業でもアルバイトでもWeb系の開発ばかりしていたので、 数学・物理、そしてアルゴリズムなどとは（少なくとも僕が意識する範囲では） 無縁だったのですが、去年末に、<a href="https://supporterz.jp/">サポーターズ</a>さんに 招待していただいた就活イベントで、お話させていただいた企業の方から</p>

<p><strong>『WEBプログラマーはアルゴリズムに弱い』</strong></p>

<p>というお話をお聴きしました。確かに必要に駆られる場合は、僕の場合、ありませんでした。</p>

<p>それでも、できないよりは、簡単なものから初めてみようと思い、TopCoderやAOJに登録して みました。しかし、すぐにアルゴリズムをちゃんと勉強して、知識として持っていなくては 八方塞がりになることが、頻繁にあったので、空き時間に少しづつ本を読んだりしていました。</p>

<p>今回は、その中で、頻繁に出てくるテクニックとして、深さ優先探索と幅優先検索について グラフ理論の基礎から復習を兼ねて、まとめてみたいと思います。 （※可能であればc++とpythonで実践もしたいと思います。）</p>

<p>概要はwikipediaやグーグル検索すれば、大体わかると思います。 僕も最近知ったもので、グーグル検索ですぐに手に入る程度の知識しかありません。</p>

<h3>グラフ理論とは</h3>

<p>数学の１分野で、ノード(頂点、node)とエッジ(枝、edge)の集合で構成されるグラフの性質について 研究する学問である。</p>

<p>コンピュータのデータ構造やアルゴリズムに広く応用されている。 (※ リスト構造、wwwのハイパーリンク、デッドロックの検出、ファイルシステム、ガベージコレクションなど)</p>

<p>下図はグラフ理論における、グラフの例です。矢印があるほうが<strong>有向グラフ</strong>、 ないものが<strong>無向グラフ</strong>です。</p>

<p><img src="http://i2.wp.com/cdn-ak.f.st-hatena.com/images/fotolife/m/minorio/20070908/20070908145747.png?resize=321%2C249" class="alignnone" data-recalc-dims="1" /></p>

<p><img src="http://i0.wp.com/blog-imgs-13.fc2.com/j/a/v/javaprograming/graf.gif?resize=456%2C281" class="alignnone" data-recalc-dims="1" /></p>

<p>今回、僕が書きたいのが、このようなグラフから任意の条件にマッチするグラフを検索する <strong>幅優先検索</strong>と<strong>深さ優先探索</strong>です。</p>

<p>専門用語等、不明なワードがあれば、　wikipediaを参照してみてください。</p>

<p>経路探索などにも用いられることが多いので、 ゲームを作ったりする方は馴染みがあるかもしれません。</p>

<h3>●幅優先探索とは</h3>

<p>英語でBreadth first search。グラフ理論において、グラフや木構造(ツリー構造)の探索に用いられる。 アルゴリズムは根ノードで始まり隣接した全てのノードを探索する。 それからこれらの最も近いノードのそれぞれに対して同様のことを繰り返して探索対象ノードをみつける。</p>

<blockquote><p>アルゴリズムの観点からだと、ノードの展開により得られる子はキューに追加される。 典型的な実装の場合、未訪のノードは&#8221;open&#8221;と名づけられた(キューや連結リストのような) コンテナに格納され、既訪のノードは&#8221;closed&#8221;と名づけられたコンテナに格納されることになる。</p></blockquote>

<p><img src="http://i1.wp.com/upload.wikimedia.org/wikipedia/commons/b/bc/Breadth-first-tree.png?resize=450%2C311" class="alignnone" data-recalc-dims="1" /></p>

<h4>アルゴリズムの実装手順</h4>

<ol>
<li>根ノードを空のキューに加える。</li>
<li>ノードをキューの先頭から取り出し、以下の処理を行う。

<ul>
<li>ノードが探索対象であれば、探索をやめ結果を返す。</li>
<li>そうでない場合、ノードの子で未探索のものを全てキューに追加する。</li>
</ul>
</li>
<li>もしキューが空ならば、グラフ内の全てのノードに対して処理が行われたので、探索をやめ&#8221;not found&#8221;と結果を返す。</li>
<li>2に戻る。</li>
</ol>


<p>※実際にプログラミング言語による実装は、後ほど・・・。</p>

<h3>●深さ優先探索とは</h3>

<p>英語でdepth first search(DFSと略されることも多い)。別名バックトラック法。 こちらもグラフやツリー構造の探索に用いられるアルゴリズム。</p>

<blockquote><p>アルゴリズムは根から(グラフの場合はどのノードを根にするか決定する)始まり、 バックトラックするまで可能な限り探索を行う。</p></blockquote>

<p><img src="http://i2.wp.com/upload.wikimedia.org/wikipedia/commons/2/2c/Depthfirst.png?resize=471%2C465" class="alignnone" data-recalc-dims="1" /></p>

<h4>深さ優先探索の概要</h4>

<blockquote><p>形式的には、深さ優先探索は、探索対象となる木の最初のノードから、 目的のノードが見つかるか子のないノードに行き着くまで、深く伸びていく探索である。 その後はバックトラックして、最も近くの探索の終わっていないノードまで戻る。 非再帰的な実装では、新しく見つかったノードはスタックに追加される。</p></blockquote>

<p>深さ優先探索の実装には、スタックを用いたものと、再帰を用いたものが代表的です。 検索するノードの順番が一筆書きできる、という特徴があります。</p>

<h4>スタックで実装手順</h4>

<ol>
<li>スタックを用意する</li>
<li>スタックに最初の要素を入れる(push)</li>
<li>スタックから要素を取り出す(pop)</li>
<li>要素に対して処理をする</li>
<li>要素の子供をスタックに入れる(push)</li>
<li>スタックがカラになるまで3～5を繰り返す</li>
</ol>


<p><a href="http://d.hatena.ne.jp/lettas0726/20110418/1303097692">引用元</a></p>

<p>※実際にプログラミング言語による実装は、後ほど・・・。</p>

<h3>●深さ優先探索と幅優先探索のどちらを利用するべきか</h3>

<h4>深さ優先探索を用いるべきケース</h4>

<ul>
<li>前通りのパターンを列挙し、結果をまとめる必要がある場合</li>
<li>文字列などを探索するときに、辞書順であることが求められる場合</li>
</ul>


<h4>幅優先探索を用いるべきケース</h4>

<ul>
<li>始点から最も近いおのを求めたいケース</li>
<li>探索範囲は広いが、ある程度近くに求めたい解が存在することがわかっているケース</li>
<li>探索範囲が広く、深さ優先探索ではスタックが大量に使われてしまうケース</li>
</ul>


<p>上記内容はこちらの書籍を引用しました。実装例なども含まれています。redcoderの方が書いた TopCoderの入門書です。</p>

<p><a href="http://www.amazon.co.jp/%E6%9C%80%E5%BC%B7%E6%9C%80%E9%80%9F%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%9E%E3%83%BC%E9%A4%8A%E6%88%90%E8%AC%9B%E5%BA%A7-%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%82%B3%E3%83%B3%E3%83%86%E3%82%B9%E3%83%88TopCoder%E6%94%BB%E7%95%A5%E3%82%AC%E3%82%A4%E3%83%89-%E9%AB%98%E6%A9%8B-%E7%9B%B4%E5%A4%A7/dp/4797367172">最強最速アルゴリズマー養成講座 プログラミングコンテストTopCoder攻略ガイド</a></p>

<h3>プログラミングによる実装</h3>

<p>c++とpython、どちらで実装するか悩みましたが、まずは高レベルのmoduleが 充実していそうなpythonから挑戦してみました。</p>

<p>3*3マスのフィールドを、</p>

<ol>
<li>深さ優先探索で同じ道を通らずにゴールまで進むパターンは何通りあるかを調べる</li>
<li>幅優先探索で最短経路は何歩であるか調べる(1歩1マスとして)</li>
</ol>


<p>という問題を幅優先探索と深さ優先探索を用いて求めてみます。</p>

<p>3*3マスのフィールドは文字列型の配列で</p>

<pre>string map[] =
{
    "...",
    "...",
    "..."
};
</pre>


<p>と表現するとします。障害物のない状態なら、3*3という整数があれば表現できますが、 汎用的にするために、ここではこうしておきます。</p>

<p>startする地点は(0,0)の左上、ゴールは(4,4)つまり右下 とします。</p>

<p>動けるのは上下、左右で、斜めはなし。</p>

<h5>pythonによるBFSとDFSの実装</h5>

<pre># -*- coding:utf-8 -*-

from Queue import Queue
import time

def get_map_info(map = ""):
    map_width = len(map[0])
    map_height = len(map)
    map_info = {'width':map_width, 'height':map_height, 'startX':0, 'startY':0, 'targetX':map_height-1, 'targetY':map_width-1}
    return map_info


# 深さ優先探索でルートの数を調べる
def search_route_by_dfs(map = ""):
    map_info = get_map_info(map)
    map_passed = [[False for j in range(map_info['width'])] for i in range(map_info['height'])]

    return search_route_dfs_recursion(map_info['startX'], map_info['startY'], map_info, map_passed)


def search_route_dfs_recursion(x, y, map_info, map_passed):

    #down up left right の各種動きをリストで表現
    move_x = [1, -1, 0,  0]
    move_y = [0,  0, 1, -1]
    move_pattern = len(move_x)
    count = 0

    #ゴールに到達した場合
    if x == map_info['targetX'] and y == map_info['targetY']:
        # 全ての道を通過した判定をする場合はコメントを外す
        """
        map_passed[x][y] = True
        for i in range(map_info['width']):
            for j in range(map_info['height']):
                if not map_passed[i][j]:
                    return 0
        """
        return 1

    #範囲内、未踏、かつゴールに到達していない場合
    if (0 &lt;= x) and (x &lt; map_info['width']) and ( 0 &lt;= y) and (y &lt; map_info['height']) :
        passed = map_passed[x][y]
        if not passed:
            map_passed[x][y] = True
            for i in range(move_pattern):
                count += search_route_dfs_recursion(x+move_x[i], y+move_y[i], map_info, map_passed)
            map_passed[x][y] = False #走査が終わった道は初期化する
    
    return count


def search_route_by_bfs(map = ""):
    move_x = [1, -1, 0,  0]
    move_y = [0,  0, 1, -1]
    move_pattern = len(move_x)
    map_info = get_map_info(map)
    map_passed = [[-1 for j in range(map_info['width'])] for i in range(map_info['height'])]

    # Queueを利用していることを解りやすくするためにQueueモジュールを使ってますが、listのappend()とpop()で同じことできます。
    queue_x = Queue()
    queue_y = Queue()
    queue_x.put(map_info['startX'])
    queue_y.put(map_info['startY'])
    map_passed[map_info['startX']][map_info['startY']] = 0
    count = 0

    while not queue_x.empty():
        x = queue_x.get()
        y = queue_y.get()

        for i in range(move_pattern):
            nextX = x + move_x[i]
            nextY = y + move_y[i]

            #範囲内、未踏、かつゴールに到達していない場合
            if  (0 &lt;= nextX) and (nextX &lt; map_info['width']) and ( 0 &lt;= nextY) and (nextY &lt; map_info['height']) :
                passed = map_passed[nextX][nextY]
                if not( nextX == map_info['targetX'] and nextY == map_info['targetY'] ) and passed == -1:
                    map_passed[nextX][nextY] = map_passed[x][y] + 1
                    queue_x.put(nextX)
                    queue_y.put(nextY)
    
    for i in range(map_info['width']):
        for j in range(map_info['height']):
            count = max(map_passed[i][j], count)

    return count


def main():
    print("start BFS and DFS sample")

    map = [
            "...",
            "...",
            "..."
        ]

    pattern = search_route_by_dfs(map)
    print(u'ゴールまでのルートの数 : '+ str(pattern) )

    pattern = search_route_by_bfs(map)
    print(u'最短歩数 : ' + str(pattern) )

if __name__ == "__main__":
    main()

</pre>


<p>幅優先探索のほうは、本で見たサンプルまんま・・・って感じですが・・・。 もうちょっと柔軟に、様々な問題をグラフ化して、どちらの検索方法でも さらっと実装したかったです・・・。</p>

<p>問題解決を重ねるしかないですね・・・。</p>

<p>ちなみにc++でもQueueも再帰共に、上記の例であればpythonと同様に利用できるので 同じような流れで実装可能です。</p>

<p>推奨されるかは別として、グローバル変数を利用すれば、更にシンプルに 書くこともできます。</p>

<p>これは数こなすしかないな・・・というのが、とりあえず実装して一番感じたことです。</p>

<p>そしてもうひとつ感じたことは、問題をグラフ化する、ということが、まず問題解決の 第一関門、実装はその次、ということです。</p>

<p>この記事の目的としては、このコードに関して 検索している順番には着目してほしいですが、決して良いコードではありません。</p>

<h3>●余談ですが</h3>

<h4>検索と探索の違い</h4>

<blockquote><p>検索とは、資料や文献の中から目的の情報を探し出すこと。 検索と探索の違いは、検索は目的の情報を探し出す基準が決まっているのに対して、 探索は有効な基準（解析的な解法）がない、あるいは用いないときに、 実際に試行錯誤することによって解を探す方法を取る事。</p></blockquote>

<p>だそうです。<a href="https://ittechinf.wiki.zoho.com/%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0.html">引用元</a></p>

<h4>numpy,scipy,matplotlibを導入しました。</h4>

<p>グラフ理論をプログラミングの観点から勉強したくて、この記事を書いてる途中 pythonの上記moduleを導入してみました。</p>

<p>以前参加した<a href="http://www.zusaar.com/event/383008">プログラミングで数学を楽しむ会(2)</a>の内容 を少しづつ思い出してきました。参加した当時は、ちんぷんかんぷんでしたが、重要性と汎用性を 少しだけ理解することができたかもしれません。</p>

<p>上記モジュールを利用したサンプルなど、機会があればブログ書きたいと思います。</p>

<h3>参考・引用リンク</h3>

<ul>
<li><a href="http://ja.wikipedia.org/wiki/%E3%82%B0%E3%83%A9%E3%83%95%E7%90%86%E8%AB%96">グラフ理論 -wikipedia-</a></li>
<li><a href="http://ja.wikipedia.org/wiki/%E5%B9%85%E5%84%AA%E5%85%88%E6%8E%A2%E7%B4%A2">幅優先探索 -wikipedia-</a></li>
<li><a href="http://ja.wikipedia.org/wiki/%E6%B7%B1%E3%81%95%E5%84%AA%E5%85%88%E6%8E%A2%E7%B4%A2">深さ優先探索 -wikipedia-</a></li>
<li><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=3&amp;cad=rja&amp;ved=0CEAQFjAC&amp;url=http%3A%2F%2Fchaosweb.complex.eng.hokudai.ac.jp%2F~j_inoue%2Fgraph2007%2FGRAPH2007.pdf&amp;ei=aaD8UdOEGYnwkAW4nIE4&amp;usg=AFQjCNHWfRVvBd3PnP5oWjaVFXU-mcSbQQ&amp;sig2=oiMDlh1FQOkPSXeTE3PkoA">グラフ理論 講義ノート &ndash; 混沌系工学研究室 &ndash; 北海道大学</a></li>
<li><a href="http://javaprograming.blog43.fc2.com/blog-category-8.html">グラフ　幅優先探索</a></li>
<li><a href="http://d.hatena.ne.jp/minorio/touch/searchdiary?word=*%5B%A5%B0%A5%E9%A5%D5%CD%FD%CF%C0%5D">タスクツリーの問題はどう解けばいいのか？</a></li>
<li><a href="http://www.slideshare.net/teruok/2-13550752">2章グラフ理論スピード入門</a></li>
<li><a href="http://d.hatena.ne.jp/lettas0726/20110418/1303097692">深さ優先探索と幅優先探索の簡単な実装方法</a></li>
</ul>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[[Ruby]ruby warriorというゲームをクリアしました。]]></title>
    <link href="http://KentaKomai.github.io/blog/2013/08/01/wordpress59/"/>
    
    <updated>2013-08-01T00:00:00+09:00</updated>
    <id>http://KentaKomai.github.io/blog/2013/08/01/wordpress59</id>
    
    <content type="html"><![CDATA[<p>Rubyで、キャラクターを動かして、ダンジョンを進めていく、『Ruby warrior』というWebアプリで遊んでみました。</p>

<p><a href="https://www.bloc.io/ruby-warrior/#/">Ruby warrior</a></p>

<p><a href="http://i0.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/Screen-Shot-2013-08-01-at-18.36.42.png" rel="image_group"><img src="http://i0.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/Screen-Shot-2013-08-01-at-18.36.42.png?resize=955%2C558" alt="Screen Shot 2013-08-01 at 18.36.42" class="alignnone size-large wp-image-760" data-recalc-dims="1" /></a></p>

<p>アルゴリズムの勉強、というよりは、Rubyそのものの基本構文の勉強に良いかな、と思ってます。</p>

<p>制御構文は基本的なものは大体が必要になるので。</p>

<p>レベルが進むごとに、難易度が上がっていきます。レベル１はまっすぐ進み続けるだけ。レベルは９まであります。</p>

<p><a href="http://i1.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/Screen-Shot-2013-08-01-at-18.41.20.png" rel="image_group"><img src="http://i1.wp.com/tamago.servehttp.com/blog/wp-content/uploads/2013/08/Screen-Shot-2013-08-01-at-18.41.20.png?resize=955%2C319" alt="Screen Shot 2013-08-01 at 18.41.20" class="alignnone size-large wp-image-761" data-recalc-dims="1" /></a></p>

<p>画像はレベル１のスクリーンショットです。</p>

<p>レベルにもよりますが、主人公は</p>

<ul>
<li>周りを見る</li>
<li>歩く</li>
<li>攻撃する</li>
<li>回復する</li>
<li>捕虜を助ける</li>
</ul>


<p>の5種類の行動が取れて、周りを見る、以外は、１ターンに１つの行動しかできません。ダンジョンの状況によって、行動を切り替えていくプログラムを書くことで、それぞれのダンジョンをクリアしていきます。</p>

<p>道は全て一本道で、モンスターの種類が変わっていきます。</p>

<p>ちなみにRuby warriorのソースコードは全てGithubに公開されているので、自分のネットワーク環境で動作させることもできるみたいです。（GithubのREADME.mdに手順がありますが、僕は実行していません。）</p>

<p><a href="https://github.com/ryanb/ruby-warrior">Ruby warrior -Github-</a></p>

<p>僕が書いたプログラムはGistに挙げておきましたが、基本的にゴリ押しです。ダメージ食らったら回復して、それ以外は可能な限り攻撃。<a href="https://gist.github.com/KentaKomai">Kenta Komai -Gist-</a></p>

<p>歩いたことがある経路を記憶しておこうと思って、＠map変数を用意したんですが、使いませんでした。ブラッシュアップして、もっとスマートにと思います。</p>

<p>消化ターン数のランキングとかあったら、もっと良かったなぁ、と思いましたが、Gistを検索すると、様々な方のコードを見ることができるので、勉強になると思います。（※ちなみにゲーム内にランダム要素はありません。同じアルゴリズムでは、必ず同じ動作・結果になります。）</p>

<p>僕がクリアできたくらいなので、プログラミング初心者・Ruby初心者でも解ける問題だと思います。 お時間あれば、是非挑戦してみてください。面白かったです。</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[[AugularJS]todomvcのソースコードで基本的な使い方を確認・復習(夏休み企画3)]]></title>
    <link href="http://KentaKomai.github.io/blog/2013/07/29/wordpress58/"/>
    
    <updated>2013-07-29T00:00:00+09:00</updated>
    <id>http://KentaKomai.github.io/blog/2013/07/29/wordpress58</id>
    
    <content type="html"><![CDATA[<p>前回に引き続き、AnguarJSに関しての自習</p>

<p>前回・前々回で、基本的なmoduleAPIとdirectiveに関してある程度調べたので、 次は実際にプロジェクトで記述されているレベルのものを、読みといていこうと思います。</p>

<p>本当はserviceに関して($http, $rocate, $routeProviderなど)に関して書こうと 思ってたんですが、ググってたらとてもいいサンプルがあったので、読んでみました。</p>

<p>公式で紹介されている、シンプルなtodoアプリを自分で機能追加したものも書いてみたんですが、 それは機会があれば。</p>

<p><a href="https://github.com/tastejs/todomvc/tree/gh-pages/architecture-examples/angularjs">tastejs/todomvc -github-</a></p>

<p>様々なフレームワークを利用してTODOアプリを書いてみたものが、豊富に公開されています。 backborn.jsとかknockout.js、jqueryまでありますので、比較すると面白いかもしれません。</p>

<p>実際に動いている状態のものは<a href="http://todomvc.com/architecture-examples/angularjs/#/">こちら</a></p>

<p>今回は無論AngularJSのサンプルを見ていきます。</p>

<h3>まずはindex.htmlで呼び出されているjsファイルを確認</h3>

<pre></pre>


<p>こんな感じ。</p>

<p>公式で推奨されているように、それぞれファイルを分割していますね。</p>

<p>app.jsでmouduleをグローバルで定義して、各ファイルでそのmoduleを拡張しています。</p>

<p>外部moduleなどを使っていない点、チュートリアルとして、とても良いと思います。</p>

<h3>AngularJS関連のファイルの構成を確認</h3>

<h4>●app.js</h4>

<pre>var todomvc = angular.module('todomvc', []);
</pre>


<p>todomvcというmoduleを定義するだけのファイル。</p>

<h4>●jsディレクトリ内のサブディレクトリ</h4>

<pre>todomvc.directive('todoFocus', function ($timeout) {
    return function (scope, elem, attrs) {
        scope.$watch(attrs.todoFocus, function (newVal) {
            if (newVal) {
                $timeout(function () {
                    elem[0].focus();
                }, 0, false);
            }
        });
    };
});
</pre>


<p>複数ファイルがあるうちの１つを取り上げますが、内容はだいたい同じ。</p>

<p>&#8216;todoFocus&#8217;というattributreを定義しています。todoFocusというプロパティの変化に応じて、 処理を行うdirectiveのようです。 詳細は後ほど。今はザックリと構成を追っていきます。</p>

<p>todomvcというapp.jsで定義されたmoduleを他のファイルで拡張している点に注目です。</p>

<p>この辺は使われているプロジェクトによって、結構違いがあるんですが、こういう拡張もいいですね。 こういう形式にしたほうが、directive専用のmoduleを定義して、 app.jsでインポートするより、変更は少ないし、拡張はしやすいかもしれません。</p>

<p>その代わり、他のプロジェクトに、このmoduleの一部を持ち出したいときは、ソースの変更が必要になりますが。</p>

<h3>index.htmlを確認して、処理を追いかける。</h3>

<h4>bodyタグすぐ下のsectionタグでコントローラーを指定</h4>

<pre>&lt;section id="todoapp" ng-controller="TodoCtrl">
</pre>


<p>このページのほとんど全体を含んでいるタグです。 このページでは&#8217;TodoCtrl&#8217;というコントローラー１つで全ての処理を行うようです。</p>

<h4>id=&#8221;header&#8221;の箇所</h4>

<pre>&lt;header id="header">
    <h1>
  todos
</h1>
    
&lt;/header>
</pre>


<p>簡単ですね。TodoCtrlの$scope.newTodoに、input#new-todoが対応しています。formのsubmitが行われると TodoCtrlの$scope.addTodo()が実行される、という流れ。</p>

<p>それでは$scope.addTodo()の中身を確認。</p>

<pre>$scope.addTodo = function () {
    var newTodo = $scope.newTodo.trim();
    if (!newTodo.length) {
        return;
    }

    todos.push({
        title: newTodo,
        completed: false
    });

    $scope.newTodo = '';
};
</pre>


<p>これも簡単ですね。$scope.newTodo（つまり、input#new-todoのvalue）から 空白文字と終端文字を削除(trim()関数)して、newTodo変数に格納。</p>

<p>それから、newTodoの入力チェックして(!newTodo.length)ちゃんと入力があれば todo一覧にnewTodoの中身をpush(todos.push)して、あとは$scope.newTodoの中身をリセット($scope.newTodo = &#8221;;)</p>

<p>いたってシンプルです。</p>

<h4>section#mainの箇所</h4>

<pre>&lt;section id="main" ng-show="todos.length" ng-cloak>
</pre>


<p>ng-show=&#8221;todos.length&#8221;は、todosの要素数が1以上なら、このElement内を表示、って感じです。</p>

<p>ここから順番に見ていきます。</p>

<pre><input id="toggle-all" type="checkbox" ng-model="allChecked" ng-click="markAll(allChecked)" />
<label for="toggle-all">Mark all as complete</label>
</pre>


<p>またinputタグ。チェックボックスですね。$scope.allCheckedに対応。クリックすることで、$scope.markAll(allChecked)が 実行されます。</p>

<p>大体予想がつきますが、一応、$scope.markAll()の処理を確認してみます。</p>

<pre>$scope.markAll = function (completed) {
    todos.forEach(function (todo) {
        todo.completed = completed;
    });
};
</pre>


<p>$scope.totodsをforEachで回して、それぞれの要素をtodoとして、その中のcompletedを チェックボックス(引数にあるcompletedで、 つまりinput#toggle-all)にチェックがあれば、true、なければfalseを設定しています。</p>

<p>これによって、全ての要素に対して一度にチェックしたり、外したりしていますね。</p>

<p>angular.forEach(objects, function(){&#8230;})の形式は多用されるので覚えておくと便利です。</p>

<p>※個人的には、引数の名前がcompletedというのはミスなのかな・・・と思ってます。 生意気ですが、isAllCheckedとかのほうがいいんじゃないかな・・・。と個人的には思います・・・。</p>

<p>更に進んでいきます。</p>

<pre><ul id="todo-list">
  <li ng-repeat="todo in todos | filter:statusFilter" ng-class="{completed: todo.completed, editing: todo == editedTodo}">
    <div class="view">
      <input class="toggle" type="checkbox" ng-model="todo.completed" />
                  <label ng-dblclick="editTodo(todo)"></label>
                  <button class="destroy" ng-click="removeTodo(todo)"></button>
              
    </div>
            
        
  </li>
  
</ul>
</pre>


<p>このアプリ最大のキモである、todo一覧を表示する箇所です。(view)</p>

<p>上から順番に</p>

<pre><li ng-repeat="todo in todos | filter:statusFilter" ng-class="{completed: todo.completed, editing: todo == editedTodo}">
  </pre>


<p>  <p></p>

<pre><code>$scope.todosの要素数だけ繰り返します。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>ポイントは、filter:statusFilterの部分。
</code></pre>

<p>  </p></p>

<p>  <pre>
$scope.$watch(&lsquo;location.path()&rsquo;, function (path) {</p>

<pre><code>$scope.statusFilter = (path === '/active') ?
    { completed: false } : (path === '/completed') ?
    { completed: true } : null;
</code></pre>

<p>});
</pre></p>

<p>  <p></p>

<pre><code>ここで、何をしているか、というとlocation.path()を監視して、変化があれば$scope.statusFilterを常に切り替えてます。
具体的に言うと
</code></pre>

<p>  </p></p>

<p>  <ul></p>

<pre><code>&lt;li&gt;
  URL が****/activeならcompleted:false
&lt;/li&gt;

&lt;li&gt;
  URL が****/completedならcompleted:true
&lt;/li&gt;

&lt;li&gt;
  それ以外は全てnull
&lt;/li&gt;
</code></pre>

<p>  </ul></p>

<p>  <p></p>

<pre><code>を設定しています。これによって、URLによって
</code></pre>

<p>  </p></p>

<p>  <ul></p>

<pre><code>&lt;li&gt;
  終了していないtodoの一覧を表示する
&lt;/li&gt;

&lt;li&gt;
  終了したtodoの一覧を表示する
&lt;/li&gt;

&lt;li&gt;
  全て表示する
&lt;/li&gt;
</code></pre>

<p>  </ul></p>

<p>  <p></p>

<pre><code>を切り替えています。かしこいー。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>URLの切り替えは
</code></pre>

<p>  </p></p>

<p>  <pre>
&lt;footer id=&ldquo;footer&rdquo; ng-show=&ldquo;todos.length&rdquo; ng-cloak></p>

<pre><code>&lt;span id="todo-count"&gt;&lt;strong&gt;&lt;/strong&gt;
    &amp;lt;ng-pluralize count="remainingCount" when="{ one: 'item left', other: 'items left' }"&gt;&amp;lt;/ng-pluralize&gt;
&lt;/span&gt;
&lt;ul id="filters"&gt;
</code></pre>

<p>  <li></p>

<pre><code>&lt;a ng-class="{selected: location.path() == '/'} " href="#/"&gt;All&lt;/a&gt;
</code></pre>

<p>  </li></p>

<p>  <li></p>

<pre><code>&lt;a ng-class="{selected: location.path() == '/active'}" href="#/active"&gt;Active&lt;/a&gt;
</code></pre>

<p>  </li></p>

<p>  <li></p>

<pre><code>&lt;a ng-class="{selected: location.path() == '/completed'}" href="#/completed"&gt;Completed&lt;/a&gt;
</code></pre>

<p>  </li></p>

<p></ul></p>

<p><button id="clear-completed" ng-click="clearCompletedTodos()" ng-show="completedCount">Clear completed ()</button>
&lt;/footer>
</pre></p>

<p>  <p></p>

<pre><code>この部分のaタグで切り替えてますね。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>つぎは、いよいよtodoそのものが表示されている部分
</code></pre>

<p>  </p></p>

<p>  <pre></p>

<div class="view">
  <input class="toggle" type="checkbox" ng-model="todo.completed" />
      <label ng-dblclick="editTodo(todo)"></label>
      <button class="destroy" ng-click="removeTodo(todo)"></button>
  
</div>


<p></pre></p>

<p>  <p></p>

<pre><code>上から順番に。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>最初はチェックボックス、モデルは$scope.todo.completedです。このチェックボックスを切り替えることに
よって、対象のtodoが完了か、そうでないかを判断・切替ができるようになってます。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>つぎはtodoの内容()です。ダブルクリックすると(ng-dblclick)すると$scope.editTodo(todo)
が動作するようになっていますね。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>$scope.editTodo()を見てみます。
</code></pre>

<p>  </p></p>

<p>  <pre>
$scope.editTodo = function (todo) {</p>

<pre><code>$scope.editedTodo = todo;
// Clone the original todo to restore it on demand.
$scope.originalTodo = angular.extend({}, todo);
</code></pre>

<p>};
</pre></p>

<p>  <p></p>

<pre><code>ダブルクリックされた$scope.todoを引数に受け取り、$scope.editedTodoにコピーしてますね。
これ、ちょっと、いまは意味不明ですが、angular.extend({}, todo)で、これまた$scope.originalTodoに
todoオブジェクトをコピーしています。これの違いは後ほど。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>最後はボタン。クリックするとremoveTodo(todo)が実行されます。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>処理内容は以下
</code></pre>

<p>  </p></p>

<p>  <pre>
$scope.removeTodo = function (todo) {</p>

<pre><code>todos.splice(todos.indexOf(todo), 1);
</code></pre>

<p>};
</pre></p>

<p>  <p></p>

<pre><code>これはそのまんま。todosのなかからtodoと同じものを探して、そこから１つを削除。
つまり、todosのなかのtodoのみを削除。それだけです。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>そして最後。
</code></pre>

<p>  </p></p>

<p>  <pre></p>

<p></pre></p>

<p>  <p></p>

<pre><code>ここに今回、説明がめんどくさい部分が全て集結していると言っても
過言ではない。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>まずは見慣れない、attirbuteが３つ。todo-blurとtodo-escapeとtodo-focus。
それぞれに何かしらのイベントかなんかが、設定されています。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>これは最初のほうに説明した、独自directiveです。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>これらが何をしているか、それぞれのファイルを見てみます。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>まずはtodo-escape.js
</code></pre>

<p>  </p></p>

<p>  <pre>
todomvc.directive(&lsquo;todoBlur&rsquo;, function () {</p>

<pre><code>var ESCAPE_KEY = 27;
return function (scope, elem, attrs) {
    elem.bind('keydown', function (event) {
        if (event.keyCode === ESCAPE_KEY) {
            scope.$apply(attrs.todoEscape);
        }
    });
};
</code></pre>

<p>});
</pre></p>

<p>  <p></p>

<pre><code>ごめんなさい、初見だと意味わかんない。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>要するに、keydownされたときのeventを監視してるんですが、押されたkeyがESCだったときに
scope.$apply(attrs.todoEscape);を実行する、感じですね。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>じゃぁ$applyとは何か。ものすごくざっくり言うと、引数に受け取った関数を実行する、的な感じ。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>面白いな、と思ったのが、todo-escapeもtodo-blurもtodoBlurとして定義されているんですね。
それで、ESCが押されたか、そうでないかで実行する処理を変えてます。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>上記のtodo-escape.jsでは&amp;#8217;todoBlur&amp;#8217;というattirbuteがついたDOMエレメントが、keydownでESCが押された場合は
そのDOMエレメントのtodoEscapeというattributeの内容が関数として実行されます。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>つまり、上記の場合だとrevertEditing(todo)という処理が実行される。うまくできてるなー・・・。
</code></pre>

<p>  </p></p>

<p>  <pre>
$scope.revertEditing = function (todo) {</p>

<pre><code>todos[todos.indexOf(todo)] = $scope.originalTodo;
$scope.doneEditing($scope.originalTodo);
</code></pre>

<p>};
</pre></p>

<p>  <p></p>

<pre><code>ここでの処理は、todos内のtodoと同じオブジェクトに、編集前のオブジェクトを挿入しています。
その後は$scope.doneEditing($scope.originalTodo)を実行。これは後ほど。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>うまく説明できてないと思いますが、ソースコード読んでもらえれば納得できると思います。
todo-escape.jsというファイルでありながら、todoEscapeというdirectiveが定義されているわけではないんですね。
あくまで、todoEscapeという属性に書かれた関数を取るため。イベントの監視自体はtodoBlurという属性で監視しています。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>次はtodo-blur.js
</code></pre>

<p>  </p></p>

<p>  <pre>
todomvc.directive(&lsquo;todoBlur&rsquo;, function () {</p>

<pre><code>return function (scope, elem, attrs) {
    elem.bind('blur', function () {
        scope.$apply(attrs.todoBlur);
    });
};
</code></pre>

<p>});
</pre></p>

<p>  <p></p>

<pre><code>これはシンプルですね。対象のDOMエレメントに対して、blurのイベントをbindして、
todoBlurに設定された関数を実行する、という感じです。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>この形式は、非常に汎用性が高いので、覚えておくと便利かもしれません。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>todoBlurに設定されているイベントはdoneEditing(todo)ですね。さきほどの$scope.revertEditing()
内でも呼び出されていました。
</code></pre>

<p>  </p></p>

<p>  <pre>
$scope.doneEditing = function (todo) {</p>

<pre><code>$scope.editedTodo = null;
todo.title = todo.title.trim();

if (!todo.title) {
    $scope.removeTodo(todo);
}
</code></pre>

<p>};
</pre></p>

<p>  <p></p>

<pre><code>こちらは$scope.editedTodo（編集中のtodo）をnullにして、todo.titleから空白文字、終端文字を削除。
最後に、todo.titleが空っぽなら、$scope.removeTodo(todo);を実行。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>最後にtodo-focus.js
</code></pre>

<p>  </p></p>

<p>  <pre>
todomvc.directive(&lsquo;todoFocus&rsquo;, function todoFocus($timeout) {</p>

<pre><code>return function (scope, elem, attrs) {
    scope.$watch(attrs.todoFocus, function (newVal) {
        if (newVal) {
            $timeout(function () {
                elem[0].focus();
            }, 0, false);
        }
    });
};
</code></pre>

<p>});
</pre></p>

<p>  <p></p>

<pre><code>これも、よく見かける形式です。todoFocusに設定された値（&amp;#8221;todo == editedTodo&amp;#8221;）を監視して、
この値がtrueなら
</code></pre>

<p>  </p></p>

<p>  <pre>
$timeout(function () {</p>

<pre><code>elem[0].focus();
</code></pre>

<p>}, 0, false);
</pre></p>

<p>  <p></p>

<pre><code>を実行します。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>これで、先ほど後回しにした
</code></pre>

<p>  </p></p>

<p>  <pre>
$scope.editTodo = function (todo) {</p>

<pre><code>$scope.editedTodo = todo;
// Clone the original todo to restore it on demand.
$scope.originalTodo = angular.extend({}, todo);
</code></pre>

<p>};
</pre></p>

<p>  <p></p>

<pre><code>の話が出てきます。
要素をダブルクリックすると$scope.editTodoに、クリックしたtodoが設定されます。(変更前のものも、$scope.originalTodoにコピーしておきます)
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>これが変更されると、todoFocusというattributeによって、&amp;#8221;todo == editedTodo&amp;#8221;が評価されます。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>editedTodoはtodoがコピーされているので、対象のDOMエレメントがfocus()されます。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>これによって、ユーザがテキストボックスに入力できるようになります。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>入力が終了して、blurされるか、ESCキーがkeydownされると、前述した、それぞれの処理へ。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>こんな感じです。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>これで全部。
</code></pre>

<p>  </p></p>

<p>  <h3></p>

<pre><code>今回説明しなかったところをざっくりと。
</code></pre>

<p>  </h3></p>

<p>  <ol></p>

<pre><code>&lt;li&gt;
  データは全てlocal strageに保存されている。
&lt;/li&gt;

&lt;li&gt;
  データの新規作成、詳細の取得、編集、削除はfactoryのgetとputで管理している
&lt;/li&gt;

&lt;li&gt;
  TodoCtrl内でtodos(todoの一覧)のデータを$watch(変更の監視)をすることによって、各種処理で変更があった場合は
  factoryを通してデータを処理している
&lt;/li&gt;
</code></pre>

<p>  </ol></p>

<p>  <p></p>

<pre><code>これでソースコードの全部を説明終わり。
上記３点によって、完全にHTML/CSS/javascriptのアプリケーションになってますね。
local strageを利用しているのでオフラインでも利用できます。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>絶対わかりづらいと思うけど、ごめんなさい。
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>このソースコードが実際に動作しているのは
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>&lt;a href="http://todomvc.com/architecture-examples/angularjs/#/"&gt;todos&lt;/a&gt;
</code></pre>

<p>  </p></p>

<p>  <p></p>

<pre><code>にて、確認できます。ソースコードと並べて動作を見ると本当に勉強になります。
</code></pre>

<p>  </p></p>
]]></content>
    
  </entry>
  
</feed>